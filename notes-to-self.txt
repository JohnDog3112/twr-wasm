add buffer size to io_gets()
add twr_getkey() as well as existing twr_getchar().
add twrDivInkey?  Its mostly implemented
add some JS Date functions
add more JS Math functions

move assert into twr_crt and mod to use twr_dbg_printf()
seed rand() with time upon startup
move operator new to wasm runtime, out of balls example.
add twr_cache_free_cache() api and use in windowed console in some places?  Or set max cache size in malloc cache API?

change my examples to all use one (the same) makefile?

double check "C_Cpp.default.defines": is correct location in workspace file. is it needed in makefile? can it be moved to vscode
twrDiv vs twrCanvas cursor management discrepancies
   - io_putc will call twrDiv::charOut(), which used block cursor and will enable focus on the div when curor enabled
   - io_putc uses its internal default implementation ofr twr::Canvas, which uses underscore as cursor and can't set the canvas focus
   - io_putc logic doesn't seem right - it assumes if io->charout.io_putc not set, the console is windowed, and if 
      io->charout.io_putc is set, it just sort of punts for windowed?  
struct IoConsole* twr_wasm_get_windowcon();  should this be renamed - create? 
rename struct IoConsole * twr_get_stdio_con(); to twr_wasm style...?
not sure why "W" of "Hello World" in stdio-canvas example looks funny
add an example that shows how to call back into javascript from C
should i do a react example?
need better overflow detection? see square example, enter very large number
deploy examples on web: https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurestaticwebapps
or with github https://github.com/gzuidhof/coi-serviceworker
also see: https://developers.zoom.us/docs/meeting-sdk/web/sharedarraybuffer/#enable-sharedarraybuffer-on-managed-cloud-platforms
add option for debuginfo display. 
    For example, stack size, heap size, etc.  Mem high water mark.  both crt and ts info.  
   add debuginfo option to display graphic 2d calls and sizes
   malloc alloc & free warnings
combine magic word and size in malloc from two alloc units to one alloc unit.
change canvas cursor (hollow) when canvas doesn't have focus
get source maps working reliably in bundled builds
add source to module, also perhaps this is needed for above
add check of response.ok to fetchAndPutURL 0 fetch (see loadWasm)
need a better system than this to check for crossOriginIsolated.  Check in module constructor?
         if (typeof window !== 'undefined') { // this check only works if window valid
            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) 
                throw new Error("twrSignal constructor, crossOriginIsolated="+crossOriginIsolated+". See SharedArrayBuffer docs.");
        }

in bundled examples, function_calls, console, get error "An import map is added after module script load was triggered."

change -std=c17 to more recent version?
should I remove include, lib-js, lib-c, etc from github? They are all built.
change twrWasmModule to not use 'await' on executeC, malloc, etc calls?
std features people want most are the ones in the standalone profile.
libc++ https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libstdc%2B%2B-v3/libsupc%2B%2B;hb=HEAD
malloc is slow
check out malloc and other crt at https://github.com/rebol/rebol
a form like this can be used to improve GetVALUE() functions in wasmModule: const z = new Uint8ClampedArray(buffer, 1, 4); ?
need to improve implementation of getU8Arr/32
executeC calls are slow (i did a performance test, and way way slower then the import calls)
if (twr_strcmp(buffer, "0.100000")!=0) return 0;  // see unittests.c comment
should i get rid of font default?  on a div and canvas you can set a font.
d2d - set default font as current font
add overload: fillText(text, x, y, maxWidth)
add D2D for textAlign (set)
Keep D2D_ color in RGBA mode?
D2D ImageData should probably not use mem address as index?  Address could get reused.
d2d_setfillstyle/stroke -- add CSS text version
add last new call (fillchar) to balls test c++ class
bottom row of Balls demo checkerboard has a garbage blue pixels.  Not sure why. Went away mysteriously when i updated to async/sync version.
should i stop using the -cc1 clang flag?
cstart.o (cstart.s) - is it handled correctly? double check.
Look at disabling exceptions in c++;
remind my self why modasync uses const urlToLoad = new URL(pathToLoad, document.URL); and not new Worker(new URL('twrmodworker.js', import.meta.url), {type: "module" });
awbasic gnu build needs ioconsole support - it disappeared when i took out tiny-wasm-runtime
awbasic - test all workspace builds
should opnew.cpp be renamed newop.cpp?
is this causing balls to not appear to touch some times?  Improve?  Ball example:
   // back off of ball we collided with, so there wont be another immediate collision detection
move png to doc folder
when I failed to include the following static class variable definitions, i did not get a linker error, just weird runtime memory corruption:
   int Ball::m_numRadii;   int Ball::m_radii[MAX_NUM_RADII];
   likely because of wasm-ld --allow-undefined.  Need to see if there is an alternate to this flag.
in the npm package
   add source?
remove ld-v-out.txt   
test on mac chrome and safari and mobile chrome and on the internet
substituion strings not support in mod.divLob(), eg console.log("The price is %.2f.", price);      
       GET https://gray-cliff-03fc78e10.5.azurestaticapps.net/examples/function-calls/function-calls.c 404 (Not Found)
add 'gotcha' section to debugging readme - static class functions, accidental re-entrant c
look at my implementation of precision for %g %f % e, they are handeld differently but i treat the the same
the following prints strange 1e+2 for result of .1g
>>snprintf(buf, sizeof(buf), "BALLS: %d of %d  FPS: %.1g", m_numBalls, MAX_BALLS, m_fps);
/0 in C hangs with not exception or error

NOTES:
https://mike.zwobble.org/2021/04/adventures-in-webassembly-object-files-and-linking/
https://www.reddit.com/r/WebAssembly/
compile-rt crtbegin.C
https://github.com/llvm/llvm-project/blob/7ef1a59ed1ca176cf3c38672fe1d3f49c1758e49/compiler-rt/lib/builtins/crtbegin.c#L24
CORS on github:
https://stackoverflow.com/questions/68609682/is-there-any-way-to-use-sharedarraybuffer-on-github-pages#:~:text=4%20Answers&text=You%20can%20get%20SharedArrayBuffer%20to,have%20the%20appropriate%20headers%20set.
https://github.com/wuzhouhui/c_standard_lib/tree/master
https://daniel-hug.github.io/characters/#k_70
https://depth-first.com/articles/2020/01/13/first-steps-in-webassembly-hello-world/
https://ddr0.ca/blog-posts/13.Shared_Array_Buffers_With_WASM
https://blog.scottlogic.com/2019/07/15/multithreaded-webassembly.html

https://stackoverflow.com/questions/53142710/howto-notify-npm-of-dependency-on-native-c-library


From old Makefile dev:

# The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.
# What is commonly known as the LLVM bitcode file format (also, sometimes anachronistically known as bytecode)
# is actually two things: a bitstream container format and an encoding of LLVM IR into the container format.
# llvm-link takes several LLVM bitcode files and links them together into a single LLVM bitcode file.
# The llc command compiles LLVM source inputs into assembly language for a specified architecture
# llc doc - The choice of architecture for the output assembly code is automatically determined from the input file
# The -cc1 argument indicates that the compiler front-end is to be used, and not the gcc driver. 

#out/awbasic.wasm: glue.c
#	clang -cc1 -emit-llvm-bc -triple=wasm32-unknown-unknown-wasm -std=c11  glue.c -o out/glue.bc                
#	llvm-link -o out/wasm.bc out/glue.bc
#	llc -O3 -filetype=obj out/wasm.bc -o out/glue.o
#	wasm-ld out/glue.o -o out/awbasic.wasm  --no-entry --allow-undefined  --import-memory --export=glue --export=get_heap_base

#
# build command line executable
#

#	-resource-dir C:/msys64/ucrt64/lib/clang/17 \
#	-internal-isystem C:/msys64/ucrt64/lib/clang/17/include \

#	-internal-isystem ../lib-twr/std-crt-include \


# why doesn't -fno-exceptions or -fno-trappping-math work? probably because using -cc1

# below also works with link line updated to just use wasm-ld
#CFLAGS =  --target=wasm32-unknown-unknown-wasm -std=c17 -g -Wall -c -v \

# below does not produce an output.  It seems --allow-undefined symbols is required
#	wasm-ld $(OBJOUTDIR)/wasm.o -o $(OBJOUTDIR)/awbasic.wasm  -v --no-entry --warn-unresolved-symbols --import-undefined --import-memory --export=run_basic_file  --export=twr_capi_malloc


# i found this useful to look at symbols
# llc -filetype=asm wasm.bc -o wasm.asm
# other good tools: wasm-decompile, wasm-validate, llvm-objdump -S
# and wasm2wat awbasic.wasm -o aw.asm