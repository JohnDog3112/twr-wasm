
add buffer size to io_gets()
add twr_getkey() as well as existing twr_getchar().
add twrDivInkey?  Its mostly implemented
add some JS Date functions
add more JS Math functions
add ability to query global browser variables.  eg   val location = window["location"]; 
    std::string search = location["search"].as<std::string>();
add ability to pass JS object to C/C++
add C function abort

move assert into twr_crt and mod to use twr_conlog()
seed rand() with time upon startup
move operator new to wasm runtime, out of balls example?
add twr_cache_free_cache() api and use in windowed console in some places?  Or set max cache size in malloc cache API?

change my examples to all use one (the same) makefile?
double check "C_Cpp.default.defines": is correct location in workspace file. is it needed in makefile? can it be moved to vscode
twrDiv vs twrCanvas cursor management discrepancies
   - io_putc will call twrDiv::charOut(), which used block cursor and will enable focus on the div when curor enabled
   - io_putc uses its internal default implementation ofr twr::Canvas, which uses underscore as cursor and can't set the canvas focus
   - io_putc logic doesn't seem right - it assumes if io->charout.io_putc not set, the console is windowed, and if 
      io->charout.io_putc is set, it just sort of punts for windowed?  

give a warning when trying to buildazure and no source found (from npm). Or don't include the script in the build.
have buildazure also build lib-a
change twrWasmModule to not use 'await' on callC, malloc, etc calls?
in the npm package add source?
not sure why "W" of "Hello World" in stdio-canvas example looks funny
add an example that shows how to call back into javascript from C
need better overflow detection? see square example, enter very large number
add option for debuginfo display. 
    For example, stack size, heap size, etc.  Mem high water mark.  both crt and ts info.  
   add debuginfo option to display graphic 2d calls and sizes
   malloc alloc & free warnings
combine magic word and size in malloc from two alloc units to one alloc unit.
change canvas cursor (hollow) when canvas doesn't have focus
add check of response.ok to fetchAndPutURL 0 fetch (see loadWasm)
need a better system than this to check for crossOriginIsolated.  Check in module constructor?
         if (typeof window !== 'undefined') { // this check only works if window valid
            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) 
                throw new Error("twrSignal constructor, crossOriginIsolated="+crossOriginIsolated+". See SharedArrayBuffer docs.");
        }

change prior used -std=c17 to more recent version?
should I remove include, lib-js, lib-c, etc from github? They are all built.
std features people want most are the ones in the standalone profile.
libc++ https://gcc.gnu.org/git/?p=gcc.git;a=tree;f=libstdc%2B%2B-v3/libsupc%2B%2B;hb=HEAD
malloc is slow
check out malloc and other crt at https://github.com/rebol/rebol
a form like this can be used to improve GetVALUE() functions in wasmModule: const z = new Uint8ClampedArray(buffer, 1, 4); ?
need to improve implementation of getU8Arr/32
callC calls are slow (i did a performance test, and way way slower then the import calls)
if (twr_strcmp(buffer, "0.100000")!=0) return 0;  // see unittests.c comment
add overload: fillText(text, x, y, maxWidth)
add D2D for textAlign (set)
bottom row of Balls demo checkerboard has a garbage blue pixels.  Not sure why. Went away mysteriously when i updated to async/sync version.
cstart.o (cstart.s) - is it handled correctly? double check.
remind my self why modasync uses const urlToLoad = new URL(pathToLoad, document.URL); and not new Worker(new URL('twrmodworker.js', import.meta.url), {type: "module" });
awbasic gnu build needs ioconsole support - it disappeared when i took out tiny-wasm-runtime
awbasic - test all workspace builds
move png to doc folder
substitution strings not support in mod.divLob(), eg console.log("The price is %.2f.", price);      
does sqrt() optimize to _builtin_sqrt()? doesn't appear too.   update twr_sqrt?
(unreachable) is one way to term a web assembly function and throw an exception in JS. Are there others?
what is -lwasm? clang --target=wasm32-unknown-unknown-wasm -o test.wasm test.c -lwasm
balls performance analysis -- when lots of balls, "drawSeq" is 1/3 of time, moveAllBallsis 1/3, isCollisionNext 12%, moveSingleBall 17%
printf() is missing a few bits
add last new call (fillchar) to balls test c++ class
index/async.html in examples have links to switched to bundled/unbundled versions, but the bundled version requires a file server, and they only really work with the azure version.  The local example builds are now a bit confusing.
index.html/examples/unbundled switch is hard coded to web site so i cant test it locally
add to clang --lto-O3 \ # Aggressive link-time optimizations 
add to clang -flto \ # Add metadata for link-time optimizations
use wasm2wat on helloworld to see code size optimizations possible.
memcpy and memset - can they be made inline?
add optimized webassembly versions of memcpy and memset
"The compiler may also generate calls to memcmp, memset, and memcpy" (need to add memcmp)
why do bundled examples flash when launched in debugger with file versions?
balls example still shows error async.html:1 An import map is added after module script load was triggered.
safarri: confirm 16.3 does not support web assembly.  16.1 on georges 5 year laptop did support webassembly.
//twr_snprintf(b, sizeof(b), "%6.2d", -5);   // NOT IMPLEMENTED YET
doc? -- if (twr_strcmp(b, "1.234568e+2")!=0) return 0;  // NOTE gcc printf %e gives 1.234568e+02
and 	if (twr_strcmp(b, "1.00000e+7")!=0) return 0;    // GCC give 1e+07
does __builtin_trap(); actually work in newop.cpp?
printf ("%f", 1.0/0.0); displays "Infinity"
/0 in hangs with no exception or error.  Investigation:  Integer /0 results in exception in called function.  Double /0 returns infinity
investigate exceptions more: https://emscripten.org/docs/porting/exceptions.html
add twa-o0.a build:
rename stdlib-includes to twr-stdlib-includes
move math/bigint to subfolder?  ie, non-wasm

https://github.com/jothepro/doxygen-awesome-css
https://github.com/TypeStrong/typedoc-site/tree/master
sometimes in ball demo steptime==0.  Gens an assert.  Need to make sure this code path is okay, but seems to work.
remove this line in balls for better performance:  m_canvas.fillRect(0, 0, m_width, m_height);
i think this balls comment is no longer correct:       // ball can be subject to multiple collisions in each step.  
got a large negative number for min fps running balls demo from npmjs readme link.  Wasn't immediately reproducible.

https://just-the-docs.github.io/just-the-docs/
---
Debugging Exceptions
Stack Traces
For native Wasm exceptions, when ASSERTIONS is enabled, uncaught exceptions will print stack traces for debugging. 
ASSERTIONS is enabled by default in -O0 and disabled in optimized builds (-O1 and above). 
To display Wasm function names in stack traces, you also need â€“profiling-funcs (or -g or -gsource-map).
 Google didn't index a given page because it's a duplicate of a different page, and none of the pages was indicated as the canonical one using the canonical tag.

In JavaScript, you can also examine the stack traces using WebAssembly.Exception.prototype.stack property. For example:

try {
  ... // some code that calls WebAssembly
} catch (e) {
  // Do something with e.stack
  console.log(e.stack);
}
Stack traces within Wasm code are not supported in JavaScript-based exceptions.
----

NOTES:
good wasm article: https://surma.dev/things/c-to-webassembly/index.html
https://mike.zwobble.org/2021/04/adventures-in-webassembly-object-files-and-linking/
https://www.reddit.com/r/WebAssembly/
compile-rt crtbegin.C
https://github.com/llvm/llvm-project/blob/7ef1a59ed1ca176cf3c38672fe1d3f49c1758e49/compiler-rt/lib/builtins/crtbegin.c#L24
CORS on github:
https://stackoverflow.com/questions/68609682/is-there-any-way-to-use-sharedarraybuffer-on-github-pages#:~:text=4%20Answers&text=You%20can%20get%20SharedArrayBuffer%20to,have%20the%20appropriate%20headers%20set.
https://github.com/wuzhouhui/c_standard_lib/tree/master
https://daniel-hug.github.io/characters/#k_70
https://depth-first.com/articles/2020/01/13/first-steps-in-webassembly-hello-world/
https://ddr0.ca/blog-posts/13.Shared_Array_Buffers_With_WASM
https://blog.scottlogic.com/2019/07/15/multithreaded-webassembly.html

https://stackoverflow.com/questions/53142710/howto-notify-npm-of-dependency-on-native-c-library


From old Makefile dev:

# The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.
# What is commonly known as the LLVM bitcode file format (also, sometimes anachronistically known as bytecode)
# is actually two things: a bitstream container format and an encoding of LLVM IR into the container format.
# llvm-link takes several LLVM bitcode files and links them together into a single LLVM bitcode file.
# The llc command compiles LLVM source inputs into assembly language for a specified architecture
# llc doc - The choice of architecture for the output assembly code is automatically determined from the input file
# The -cc1 argument indicates that the compiler front-end is to be used, and not the gcc driver. 

#out/awbasic.wasm: glue.c
#	clang -cc1 -emit-llvm-bc -triple=wasm32-unknown-unknown-wasm -std=c11  glue.c -o out/glue.bc                
#	llvm-link -o out/wasm.bc out/glue.bc
#	llc -O3 -filetype=obj out/wasm.bc -o out/glue.o
#	wasm-ld out/glue.o -o out/awbasic.wasm  --no-entry --allow-undefined  --import-memory --export=glue --export=get_heap_base

#
# build command line executable
#

#	-resource-dir C:/msys64/ucrt64/lib/clang/17 \
#	-internal-isystem C:/msys64/ucrt64/lib/clang/17/include \

#	-internal-isystem ../lib-twr/std-crt-include \


# why doesn't -fno-exceptions or -fno-trappping-math work? probably because using -cc1

# below also works with link line updated to just use wasm-ld
#CFLAGS =  --target=wasm32-unknown-unknown-wasm -std=c17 -g -Wall -c -v \

# below does not produce an output.  It seems --allow-undefined symbols is required
#	wasm-ld $(OBJOUTDIR)/wasm.o -o $(OBJOUTDIR)/awbasic.wasm  -v --no-entry --warn-unresolved-symbols --import-undefined --import-memory --export=run_basic_file  --export=twr_capi_malloc


# i found this useful to look at symbols
# llc -filetype=asm wasm.bc -o wasm.asm
# other good tools: wasm-decompile, wasm-validate, llvm-objdump -S
# and wasm2wat awbasic.wasm -o aw.asm

----
when converting from -cc1 to the standard gcc compatible clang options, i discovered the following when creating twr-a:
the gcc ar (original ar i used) generated output that wasm-ld would not accept.  However, I found this work around:
   (using -cc1 clang options to compile)
	llvm-ar cr $(OBJOUTDIR)/twr-a0.bc $(OBJECTS)
	llvm-link -o $(OBJOUTDIR)/twr-a.bc $(OBJOUTDIR)/twr-a0.bc
	llc -filetype=obj $(OBJOUTDIR)/twr-a.bc -o $(TWRA)

   (ar works as well as llvm-ar)

in addition this works with the "gcc" style clang.
	llvm-ar crsv $(TWRA) $(OBJECTS)

however, files that used to work like this:
__attribute__((export_name("twr_wasm_init")))
void twr_wasm_init(int pf, unsigned long mem_size) 

now required an wasm-ld option like: --export=twr_wasm_init 

note: there is supposedly an wasm-ar, but i could not find it. It is supposedly part of emscripten.

as a result, i went back to the first option in this comment
----
