to fix canvas example: move canvas and div init parameters to constructor
create helper function used by both async and sync mod

add buffer size to io_gets()
in helloworld make, fix make file to build JS if it has changed but helloworld.c hasnt changed 
is this still true, should i improve? throw new Error("loadWasm can only be called once per twrWasmAsyncModule instance");
move node_modules into twr-wasm-api-ts folder when i create an npm package ? out of root.  Its there right now so parcel in demos finds it
double check "C_Cpp.default.defines": is correct location in workspace file. is it needed in makefile? can it be moved to vscode
implement getch or update readme
enhance mod warning of function not in export table to tell user to use --export=stdio_canvas
add twr_getkey() as well as existing twr_getchar().
move set_xy_cursorpos() (in canvas example) to io.c
get rid of these hard coded width and heights
		document.getElementById("twr_iocanvas").width=amod.canvas.getAvgCharWidth()*64;
		document.getElementById("twr_iocanvas").height=amod.canvas.getCharHeight()*16;
canvas window not selected for input by default?  add msg or fix.
move wasmmod options to constructor  opts:IloadWasmOpts, not load wasm?
prints every char on a new line in console:  io_printf(twr_wasm_get_debugcon(), "about to call set cursor %d %d",x, y);

https://daniel-hug.github.io/characters/#k_70

in the npm package
   package.json, using the exports field, update files/direcories fields to lists the part of the repo that are part of the package
	https://stackoverflow.com/questions/40795836/how-do-you-use-the-files-and-directories-properties-in-package-json
   lib-js - the built js, .d.ts, etc (output of tsc)
   src-ts
   lib-c - twr.a
   include-c - include files
   examples
      -- assume the package has been installed???
      -- build could install the package from from local code ( npm install path/to/my-package )
      -- alt: any significant html client app is going to use a bundler, other libraries, etc, and so should i just recomend people copy the source into their project? Or will the bundler bundle the node_module module files (i suspect it will)

   update master makefile 
      to use above folders
      build npm install the package

post on using C code
https://stackoverflow.com/questions/53142710/howto-notify-npm-of-dependency-on-native-c-library

should i do a react example?

typescript module resolution (idea: i could require typescript and not provide lib-js ?)

classic: Use the classic module resolution strategy.
node: Use the node module resolution strategy.
You can also configure the base directory used to resolve non-relative module

From Makefile dev:

# The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.
# What is commonly known as the LLVM bitcode file format (also, sometimes anachronistically known as bytecode)
# is actually two things: a bitstream container format and an encoding of LLVM IR into the container format.
# llvm-link takes several LLVM bitcode files and links them together into a single LLVM bitcode file.
# The llc command compiles LLVM source inputs into assembly language for a specified architecture
# llc doc - The choice of architecture for the output assembly code is automatically determined from the input file
# The -cc1 argument indicates that the compiler front-end is to be used, and not the gcc driver. 

#out/awbasic.wasm: glue.c
#	clang -cc1 -emit-llvm-bc -triple=wasm32-unknown-unknown-wasm -std=c11  glue.c -o out/glue.bc                
#	llvm-link -o out/wasm.bc out/glue.bc
#	llc -O3 -filetype=obj out/wasm.bc -o out/glue.o
#	wasm-ld out/glue.o -o out/awbasic.wasm  --no-entry --allow-undefined  --import-memory --export=glue --export=get_heap_base

#
# build command line executable
#

#	-resource-dir C:/msys64/ucrt64/lib/clang/17 \
#	-internal-isystem C:/msys64/ucrt64/lib/clang/17/include \

#	-internal-isystem ../lib-twr/std-crt-include \


# why doesnt -fno-exceptions or -fno-trappping-math work? probalby because using -cc1

# below also works with link line updated to just use wasm-ld
#CFLAGS =  --target=wasm32-unknown-unknown-wasm -std=c17 -g -Wall -c -v \

# below does not produce an output.  It seems --allow-undefined symbols is required
#	wasm-ld $(OBJOUTDIR)/wasm.o -o $(OBJOUTDIR)/awbasic.wasm  -v --no-entry --warn-unresolved-symbols --import-undefined --import-memory --export=run_basic_file  --export=twr_capi_malloc
