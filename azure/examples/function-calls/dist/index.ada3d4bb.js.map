{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,W,I,E,A,G,E,GCEA,IAgBA,EAhBI,EAAU,IAAI,IAgBlB,EAfA,SAAkB,CAAO,CAAE,CAAQ,EACjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,GAAK,EAC5C,EAAQ,GAAG,CAAC,CAAQ,CAAC,EAAE,CAAE,CACvB,QAAS,EACT,KAAM,CAAQ,CAAC,EAAI,EAAE,AACvB,EAEJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,A,E,S,a,E,E,E,O,C,qB,I,A,E,S,kB,E,E,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,QGFM,OAAO,UAAsB,EAAA,qBAAA,CACjC,MAAsC,AAGvC,aAAY,EAAc,CAAA,CAAE,CAA5B,KAIK,EAHJ,KAAK,CAAC,EAAM,CAAA,GACZ,IAAI,CAAC,MAAM,CAAC,AAAC,IAAe,MAAM,AAAI,MAAM,gCAAgC,EAG9C,EAA1B,IAAI,CAAC,SAAS,CAAC,OAAO,GAAW,IAAI,CAAC,SAAS,CACvC,IAAI,CAAC,QAAQ,CAEzB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CACtB,YAAY,EAAA,eAAA,CACZ,QAAQ,EAAA,WAAA,CACR,cAAc,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAChD,iBAAiB,EAAO,OAAO,CAAC,IAAI,CAAC,GACrC,iBAAiB,EAAO,OAAO,CAAC,IAAI,CAAC,GACrC,gBAAgB,IAAI,CAAC,IAAI,CACzB,eAAe,IAAI,CAAC,IAAI,CACxB,aAAa,IAAI,CAAC,IAAI,CACtB,SAAS,IAAI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","sources":["<anon>","../../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","../../source/twr-wasm-ts/index.ts","../../lib-js/twrmod.js","../../source/twr-wasm-ts/twrmod.ts","../../lib-js/twrdebug.js","../../source/twr-wasm-ts/twrdebug.ts","../../lib-js/twrmodjsmain.js","../../source/twr-wasm-ts/twrmodjsmain.ts","../../lib-js/twrdiv.js","../../source/twr-wasm-ts/twrdiv.ts","../../lib-js/twrcircular.js","../../source/twr-wasm-ts/twrcircular.ts","../../lib-js/twrmodbase.js","../../source/twr-wasm-ts/twrmodbase.ts","../../lib-js/twrfloat.js","../../source/twr-wasm-ts/twrfloat.ts","../../lib-js/twrcanvas.js","../../source/twr-wasm-ts/twrcanvas.ts","../../lib-js/twrsignal.js","../../source/twr-wasm-ts/twrsignal.ts","../../lib-js/twrdate.js","../../source/twr-wasm-ts/twrdate.ts","../../lib-js/twrmodasync.js","../../source/twr-wasm-ts/twrmodasync.ts","../../lib-js/twrwaitingcalls.js","../../source/twr-wasm-ts/twrwaitingcalls.ts","../../lib-js/whatkey.js","../../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/runtime-f762b97648513f2d.js","../../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/helpers/get-worker-url.js","../../../../Users/awood/AppData/Roaming/npm/node_modules/parcel/node_modules/@parcel/runtime-js/lib/runtime-8b48cd52cfa83e88.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"eZoLj\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $ae99f86db55f9acd$export$6503ec6e8aabbaf, (v) => $ae99f86db55f9acd$export$6503ec6e8aabbaf = v);\nvar $ae99f86db55f9acd$export$6503ec6e8aabbaf;\nvar $ae99f86db55f9acd$export$f7ad0328861e2f03;\n\"use strict\";\nvar $ae99f86db55f9acd$var$mapping = new Map();\nfunction $ae99f86db55f9acd$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$ae99f86db55f9acd$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $ae99f86db55f9acd$var$resolve(id) {\n    var resolved = $ae99f86db55f9acd$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$ae99f86db55f9acd$export$6503ec6e8aabbaf = $ae99f86db55f9acd$var$register;\n$ae99f86db55f9acd$export$f7ad0328861e2f03 = $ae99f86db55f9acd$var$resolve;\n\n});\n\nparcelRegister(\"4mNsm\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModule\", () => (parcelRequire(\"3bkoq\")).twrWasmModule);\n$parcel$export(module.exports, \"twrWasmModuleAsync\", () => (parcelRequire(\"baOio\")).twrWasmModuleAsync);\n\nvar $3bkoq = parcelRequire(\"3bkoq\");\n\nvar $baOio = parcelRequire(\"baOio\");\n\n});\nparcelRegister(\"3bkoq\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModule\", () => $251237c7cf144eb4$export$3298af74d75b595c);\n\nvar $9FI45 = parcelRequire(\"9FI45\");\n\nvar $aGUWE = parcelRequire(\"aGUWE\");\n\nvar $lsUl2 = parcelRequire(\"lsUl2\");\nclass $251237c7cf144eb4$export$3298af74d75b595c extends (0, $aGUWE.twrWasmModuleInJSMain) {\n    malloc;\n    constructor(opts = {}){\n        super(opts, true);\n        this.malloc = (size)=>{\n            throw new Error(\"error - un-init malloc called\");\n        };\n        let canvas;\n        if (this.d2dcanvas.isValid()) canvas = this.d2dcanvas;\n        else canvas = this.iocanvas;\n        this.modParams.imports = {\n            twrDebugLog: (0, $9FI45.twrDebugLogImpl),\n            twrTime: (0, $lsUl2.twrTimeImpl),\n            twrDivCharOut: this.iodiv.charOut.bind(this.iodiv),\n            twrCanvasGetProp: canvas.getProp.bind(canvas),\n            twrCanvasDrawSeq: canvas.drawSeq.bind(canvas),\n            twrCanvasCharIn: this.null,\n            twrCanvasInkey: this.null,\n            twrDivCharIn: this.null,\n            twrSleep: this.null,\n            twrSin: Math.sin,\n            twrCos: Math.cos,\n            twrTan: Math.tan,\n            twrFAbs: Math.abs,\n            twrACos: Math.acos,\n            twrASin: Math.asin,\n            twrATan: Math.atan,\n            twrExp: Math.exp,\n            twrFloor: Math.floor,\n            twrCeil: Math.ceil,\n            twrFMod: function(x, y) {\n                return x % y;\n            },\n            twrLog: Math.log,\n            twrPow: Math.pow,\n            twrSqrt: Math.sqrt,\n            twrTrunc: Math.trunc,\n            twrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\n            twrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\n            twrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\n            twrAtod: this.floatUtil.atod.bind(this.floatUtil),\n            twrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil)\n        };\n    }\n    null(inval) {\n        throw new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\n    }\n}\n\n});\nparcelRegister(\"9FI45\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrDebugLogImpl\", () => $70aa1fbe63deeaae$export$16b4216ec014493d);\nlet $70aa1fbe63deeaae$var$logline = \"\";\nfunction $70aa1fbe63deeaae$export$16b4216ec014493d(char) {\n    if (char == 10 || char == 3) {\n        console.log($70aa1fbe63deeaae$var$logline); // ideally without a linefeed, but there is no way to not have a LF with console.log API.\n        $70aa1fbe63deeaae$var$logline = \"\";\n    } else {\n        $70aa1fbe63deeaae$var$logline = $70aa1fbe63deeaae$var$logline + String.fromCharCode(char);\n        if ($70aa1fbe63deeaae$var$logline.length >= 200) {\n            console.log($70aa1fbe63deeaae$var$logline);\n            $70aa1fbe63deeaae$var$logline = \"\";\n        }\n    }\n}\nfunction $70aa1fbe63deeaae$export$485af4d0039b3389(ch) {\n    postMessage([\n        \"debug\",\n        ch\n    ]);\n}\n\n});\n\nparcelRegister(\"aGUWE\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleInJSMain\", () => $7c89ffbd74fdad5b$export$2366c14363f3adb5);\n// This class extends base to handle options when called in the main Java Script thread\n\nvar $fDEU7 = parcelRequire(\"fDEU7\");\n\nvar $5hO33 = parcelRequire(\"5hO33\");\n\nvar $5LsZ0 = parcelRequire(\"5LsZ0\");\nclass $7c89ffbd74fdad5b$export$2366c14363f3adb5 extends (0, $5hO33.twrWasmModuleBase) {\n    iocanvas;\n    d2dcanvas;\n    iodiv;\n    modParams;\n    constructor(opts = {}, isWasmModule = false){\n        super(isWasmModule);\n        if (typeof document === \"undefined\") throw new Error(\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\n        const eiodiv = document.getElementById(\"twr_iodiv\");\n        const eiocanvas = document.getElementById(\"twr_iocanvas\");\n        const ed2dcanvas = document.getElementById(\"twr_d2dcanvas\");\n        if (eiocanvas && ed2dcanvas) throw new Error(\"Both twr_iocanvas and twr_d2dcanvas defined. Currently only one canvas allowed.\");\n        if (opts.stdio == \"div\" && !eiodiv) throw new Error(\"twrWasmModuleBase opts=='div' but twr_iodiv not defined\");\n        if (opts.stdio == \"canvas\" && !eiocanvas) throw new Error(\"twrWasmModuleBase, opts=='canvas' but twr_iocanvas not defined\");\n        if (opts.isd2dcanvas && !ed2dcanvas) throw new Error(\"twrWasmModuleBase, opts.isdrawcanvas==true but twr_d2dcanvas not defined\");\n        // set default opts based on elements found\n        if (eiodiv) opts = {\n            stdio: \"div\",\n            ...opts\n        };\n        else if (eiocanvas) opts = {\n            stdio: \"canvas\",\n            ...opts\n        };\n        else opts = {\n            stdio: \"debug\",\n            ...opts\n        };\n        if (!eiodiv && !eiocanvas) console.log(\"Since neither twr_iocanvas nor twr_iodiv is defined, stdout directed to debug console.\");\n        else console.log(\"tiny-wasm-runtime: stdio set to: \", opts.stdio);\n        if (eiocanvas) opts = {\n            windim: [\n                64,\n                16\n            ],\n            ...opts\n        };\n        else opts = {\n            windim: [\n                0,\n                0\n            ],\n            ...opts\n        };\n        if (!opts.imports) opts.imports = {};\n        let styleIsDefault = false;\n        if (!opts.backcolor) {\n            styleIsDefault = true;\n            opts.backcolor = \"black\";\n        }\n        if (!opts.forecolor) {\n            styleIsDefault = true;\n            opts.forecolor = \"white\";\n        }\n        if (!opts.fontsize) {\n            styleIsDefault = true;\n            opts.fontsize = 16;\n        }\n        if (opts.isd2dcanvas === undefined) {\n            if (ed2dcanvas) opts.isd2dcanvas = true;\n            else opts.isd2dcanvas = false;\n        }\n        this.modParams = {\n            stdio: opts.stdio,\n            windim: opts.windim,\n            imports: opts.imports,\n            forecolor: opts.forecolor,\n            backcolor: opts.backcolor,\n            styleIsDefault: styleIsDefault,\n            fontsize: opts.fontsize,\n            isd2dcanvas: opts.isd2dcanvas\n        };\n        this.iodiv = new (0, $fDEU7.twrDiv)(eiodiv, this.modParams, this);\n        this.iocanvas = new (0, $5LsZ0.twrCanvas)(eiocanvas, this.modParams, this);\n        this.d2dcanvas = new (0, $5LsZ0.twrCanvas)(ed2dcanvas, this.modParams, this);\n    }\n    divLog(...params) {\n        for(var i = 0; i < params.length; i++){\n            this.iodiv.stringOut(params[i].toString());\n            this.iodiv.charOut(32); // space\n        }\n        this.iodiv.charOut(10);\n    }\n}\n\n});\nparcelRegister(\"fDEU7\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrDiv\", () => $b62a3a4493ce3043$export$dd376bb3f10f6896);\n\nvar $ghrAp = parcelRequire(\"ghrAp\");\nclass $b62a3a4493ce3043$export$dd376bb3f10f6896 {\n    div;\n    divKeys;\n    CURSOR = String.fromCharCode(9611);\n    cursorOn = false;\n    lastChar = 0;\n    extraBR = false;\n    owner;\n    constructor(element, modParams, modbase){\n        this.div = element;\n        this.owner = modbase;\n        if (!this.owner.isWasmModule) this.divKeys = new (0, $ghrAp.twrSharedCircularBuffer)(); // tsconfig, lib must be set to 2017 or higher\n        if (this.div && !modParams.styleIsDefault) {\n            this.div.style.backgroundColor = modParams.backcolor;\n            this.div.style.color = modParams.forecolor;\n            this.div.style.font = modParams.fontsize.toString() + \"px arial\";\n        }\n    }\n    isValid() {\n        return !!this.div;\n    }\n    getProxyParams() {\n        if (!this.divKeys) throw new Error(\"internal error in getProxyParams.\");\n        return [\n            this.divKeys.sharedArray\n        ];\n    }\n    /*\n     * add character to div.  Supports the following control codes:\n     * any of CRLF, CR (/r), or LF(/n)  will cause a new line\n     * 0xE cursor on\n     * 0x8 backspace\n     * 0xF cursor off\n    */ charOut(ch) {\n        if (!this.div) return;\n        //console.log(\"div::charout: \", ch);\n        if (this.extraBR) {\n            this.extraBR = false;\n            if (this.cursorOn) this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n            this.div.innerHTML = this.div.innerHTML.slice(0, -4);\n            if (this.cursorOn) this.div.innerHTML += this.CURSOR;\n        }\n        switch(ch){\n            case 10:\n            case 13:\n                if (ch == 10 && this.lastChar == 13) break; // detect CR LF and treat as single new line\n                if (this.cursorOn) this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML += \"<br><br>\"; //2nd break is a place holder for next line (fixes scroll issue at bottom)\n                this.extraBR = true;\n                if (this.cursorOn) this.div.innerHTML += this.CURSOR;\n                //element.scrollIntoView();\n                //element.scrollTop = element.scrollHeight;\n                let p = this.div.getBoundingClientRect();\n                window.scrollTo(0, p.height + 100);\n                break;\n            case 8:\n                if (this.cursorOn) this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                if (this.cursorOn) this.div.innerHTML += this.CURSOR;\n                break;\n            case 0xE:\n                if (!this.cursorOn) {\n                    this.cursorOn = true;\n                    this.div.innerHTML += this.CURSOR;\n                    this.div.focus();\n                }\n                break;\n            case 0xF:\n                if (this.cursorOn) {\n                    this.cursorOn = false;\n                    this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                }\n                break;\n            default:\n                if (this.cursorOn) this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML += String.fromCharCode(ch);\n                if (this.cursorOn) this.div.innerHTML += this.CURSOR;\n                break;\n        }\n        this.lastChar = ch;\n    }\n    stringOut(str) {\n        for(let i = 0; i < str.length; i++)this.charOut(str.charCodeAt(i));\n    }\n}\nclass $b62a3a4493ce3043$export$b377f0bbf2c7581e {\n    divKeys;\n    constructor(params){\n        const [divKeysBuffer] = params;\n        this.divKeys = new (0, $ghrAp.twrSharedCircularBuffer)(divKeysBuffer);\n    }\n    charIn() {\n        return this.divKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.divKeys.isEmpty()) return 0;\n        else return this.charIn();\n    }\n    charOut(ch) {\n        postMessage([\n            \"divout\",\n            ch\n        ]);\n    }\n}\n\n});\nparcelRegister(\"ghrAp\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrSharedCircularBuffer\", () => $bda3a1eb26e567b5$export$a01cca24f011573a);\n//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc() or io_getstr() is called from a C function.\n//\nconst $bda3a1eb26e567b5$var$RDIDX = 256;\nconst $bda3a1eb26e567b5$var$WRIDX = 257;\nconst $bda3a1eb26e567b5$var$LEN = 256;\nclass $bda3a1eb26e567b5$export$a01cca24f011573a {\n    sharedArray;\n    buf;\n    constructor(sa){\n        if (typeof window !== \"undefined\") {\n            if (!crossOriginIsolated && !(window.location.protocol === \"file:\")) throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa) this.sharedArray = sa;\n        else this.sharedArray = new SharedArrayBuffer(1032);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[$bda3a1eb26e567b5$var$RDIDX] = 0;\n        this.buf[$bda3a1eb26e567b5$var$WRIDX] = 0;\n    }\n    write(n) {\n        let i = this.buf[$bda3a1eb26e567b5$var$WRIDX];\n        this.buf[i] = n;\n        i++;\n        if (i == $bda3a1eb26e567b5$var$LEN) i = 0;\n        this.buf[$bda3a1eb26e567b5$var$WRIDX] = i;\n        Atomics.notify(this.buf, $bda3a1eb26e567b5$var$WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.buf[$bda3a1eb26e567b5$var$RDIDX];\n            let n = this.buf[i];\n            i++;\n            this.buf[$bda3a1eb26e567b5$var$RDIDX] = i;\n            return n;\n        } else return -1;\n    }\n    readWait() {\n        if (this.isEmpty()) {\n            const rdptr = this.buf[$bda3a1eb26e567b5$var$RDIDX];\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n            Atomics.wait(this.buf, $bda3a1eb26e567b5$var$WRIDX, rdptr);\n        }\n        return this.read();\n    }\n    isEmpty() {\n        return this.buf[$bda3a1eb26e567b5$var$RDIDX] == this.buf[$bda3a1eb26e567b5$var$WRIDX];\n    }\n}\n\n});\n\n\nparcelRegister(\"5hO33\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleBase\", () => $3d955ccf8fb141b7$export$c83a0a3bffe07399);\n\nvar $2Xdsi = parcelRequire(\"2Xdsi\");\nclass $3d955ccf8fb141b7$export$c83a0a3bffe07399 {\n    memory;\n    mem8;\n    mem32;\n    memD;\n    exports;\n    isWorker = false;\n    isWasmModule;\n    floatUtil;\n    constructor(isWasmModule = false){\n        this.isWasmModule = isWasmModule; // as opposed to twrWasmModuleAsync, twrWasmModuleInWorker\n        this.mem8 = new Uint8Array(); // avoid type errors\n        this.mem32 = new Uint32Array(); // avoid type errors\n        this.memD = new Float64Array(); // avoid type errors\n        this.floatUtil = new (0, $2Xdsi.twrFloatUtil)(this);\n    //console.log(\"size of mem8 after constructor\",this.mem8.length);\n    }\n    /*********************************************************************/ /*********************************************************************/ async loadWasm(pathToLoad) {\n        //console.log(\"fileToLoad\",fileToLoad)\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n        } catch (err) {\n            console.log(\"loadWasm() failed to fetch: \" + pathToLoad);\n            throw err;\n        }\n        if (!response.ok) throw new Error(\"fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        try {\n            let wasmBytes = await response.arrayBuffer();\n            let allimports = {\n                ...this.modParams.imports\n            };\n            let instance = await WebAssembly.instantiate(wasmBytes, {\n                env: allimports\n            });\n            this.exports = instance.instance.exports;\n            if (!this.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\n            if (this.memory) throw new Error(\"unexpected error -- this.memory already set\");\n            this.memory = this.exports.memory;\n            if (!this.memory) throw new Error(\"Unexpected error - undefined exports.memory\");\n            this.mem8 = new Uint8Array(this.memory.buffer);\n            this.mem32 = new Uint32Array(this.memory.buffer);\n            this.memD = new Float64Array(this.memory.buffer);\n            // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n            if (this.isWorker) {\n                if (this.memory.buffer instanceof ArrayBuffer) console.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n                postMessage([\n                    \"setmemory\",\n                    this.memory\n                ]);\n            }\n            if (this.isWasmModule) // here if twrWasmModule, twrWasmModuleAsync overrides this function\n            // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n            {\n                if (!(this.memory.buffer instanceof ArrayBuffer)) console.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\n            }\n            this.malloc = (size)=>{\n                return new Promise((resolve)=>{\n                    const m = this.exports.twr_malloc;\n                    resolve(m(size));\n                });\n            };\n            this.init();\n        } catch (err) {\n            console.log(\"WASM instantiate error: \" + err + (err.stack ? \"\\n\" + err.stack : \"\"));\n            throw err;\n        }\n    }\n    init() {\n        //console.log(\"loadWasm.init() enter\")\n        let p;\n        switch(this.modParams.stdio){\n            case \"debug\":\n                p = 0;\n                break;\n            case \"div\":\n                p = 1;\n                break;\n            case \"canvas\":\n                p = 2;\n                break;\n            case \"null\":\n                p = 3;\n                break;\n            default:\n                p = 0; // debug\n        }\n        const twrInit = this.exports.twr_wasm_init;\n        //console.log(\"twrInit:\",twrInit)\n        twrInit(p, this.mem8.length);\n    }\n    /* executeC takes an array where:\n    * the first entry is the name of the C function in the wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of parameters to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * URL - the file contents are loaded into module Memory via urlToMem(), and two C parameters are generated - index (pointer) to the memory, and length\n    * Uint8Array - the array is loaded into module memory via uint8ArrayToMem(), and two parameters are generated - index (pointer) to the memory, and length\n    */ async executeC(params) {\n        const cparams = await this.preCallC(params);\n        let retval = this.executeCImpl(params[0], cparams);\n        this.postCallC(cparams, params);\n        return retval;\n    }\n    async executeCImpl(fname, cparams = []) {\n        if (!this.exports) throw new Error(\"this.exports undefined\");\n        if (!this.exports[fname]) throw new Error(\"executeC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    // convert an array of parameters to numbers by stuffing contents into malloc'd wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array)) throw new Error(\"executeC: params must be array, first arg is function name\");\n        if (params.length == 0) throw new Error(\"executeC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                    cparams[ci++] = p;\n                    break;\n                case \"string\":\n                    cparams[ci++] = await this.putString(p);\n                    break;\n                case \"object\":\n                    if (p instanceof URL) {\n                        const r = await this.fetchAndPutURL(p);\n                        cparams[ci++] = r[0]; // mem index\n                        cparams[ci++] = r[1]; // len\n                        break;\n                    } else if (p instanceof ArrayBuffer) {\n                        const r = await this.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"executeC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for(let i = 1; i < params.length; i++){\n            const p = params[i];\n            switch(typeof p){\n                case \"number\":\n                    ci++;\n                    break;\n                case \"string\":\n                    this.executeCImpl(\"twr_free\", [\n                        cparams[ci]\n                    ]);\n                    ci++;\n                    break;\n                case \"object\":\n                    if (p instanceof URL) {\n                        this.executeCImpl(\"twr_free\", [\n                            cparams[ci]\n                        ]);\n                        ci = ci + 2;\n                        break;\n                    } else if (p instanceof ArrayBuffer) {\n                        let u8 = new Uint8Array(p);\n                        for(let j = 0; j < u8.length; j++)u8[j] = this.mem8[cparams[ci] + j]; // mod.mem8 is a Uint8Array view of the module's Web Assembly Memory\n                        this.executeCImpl(\"twr_free\", [\n                            cparams[ci]\n                        ]);\n                        ci++;\n                        break;\n                    } else throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n    /*********************************************************************/ /*********************************************************************/ // copy a string into existing buffer in the webassembly module memory\n    copyString(buffer, buffer_size, sin) {\n        let i;\n        for(i = 0; i < sin.length && i < buffer_size - 1; i++)this.mem8[buffer + i] = sin.charCodeAt(i);\n        this.mem8[buffer + i] = 0;\n    }\n    // allocate and copy a string into the webassembly module memory\n    async putString(sin) {\n        let strIndex = await this.malloc(sin.length);\n        this.copyString(strIndex, sin.length, sin);\n        return strIndex;\n    }\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        for(let i = 0; i < u8a.length; i++)this.mem8[dest + i] = u8a[i];\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n    // given a url, load its contents, and stuff into wasm memory similar to Unint8Array\n    async fetchAndPutURL(fnin) {\n        if (!(typeof fnin === \"object\" && fnin instanceof URL)) throw new Error(\"fetchAndPutURL param must be URL\");\n        try {\n            let response = await fetch(fnin);\n            let buffer = await response.arrayBuffer();\n            let src = new Uint8Array(buffer);\n            let dest = await this.putU8(src);\n            return [\n                dest,\n                src.length\n            ];\n        } catch (err) {\n            console.log(\"fetchAndPutURL Error. URL: \" + fnin + \"\\n\" + err + (err.stack ? \"\\n\" + err.stack : \"\"));\n            throw err;\n        }\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx) throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx) throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len\n    getString(strIndex, len) {\n        let sout = \"\";\n        let i = 0;\n        while(this.mem8[strIndex + i] && (len === undefined ? true : i < len) && strIndex + i < this.mem8.length){\n            sout = sout + String.fromCharCode(this.mem8[strIndex + i]);\n            i++;\n        }\n        return sout;\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length) throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array(this.mem8.slice(idx, idx + 8).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= this.mem8.length) throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > this.mem8.length - dataptr) throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array(this.mem8.slice(dataptr, dataptr + size).buffer);\n        return u32;\n    }\n}\n\n});\nparcelRegister(\"2Xdsi\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrFloatUtil\", () => $226b87658a7c840f$export$918ffb7e046a537b);\nclass $226b87658a7c840f$export$918ffb7e046a537b {\n    mod;\n    constructor(mod){\n        this.mod = mod;\n    }\n    atod(strptr) {\n        const str = this.mod.getString(strptr);\n        const upper = str.trimStart().toUpperCase();\n        if (upper == \"INF\" || upper == \"+INF\") return Number.POSITIVE_INFINITY;\n        else if (upper == \"-INF\") return Number.NEGATIVE_INFINITY;\n        else {\n            // allow D for exponent -- old microsoft format they still support in fctv and I support in my awbasic\n            const r = Number.parseFloat(str.replaceAll(\"D\", \"e\").replaceAll(\"d\", \"e\"));\n            return r;\n        }\n    }\n    dtoa(buffer, buffer_size, value, max_precision) {\n        if (max_precision == -1) {\n            const r = value.toString();\n            this.mod.copyString(buffer, buffer_size, r);\n        } else {\n            let r = value.toString();\n            if (r.length > max_precision) r = value.toPrecision(max_precision);\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n    }\n    toFixed(buffer, buffer_size, value, decdigits) {\n        const r = value.toFixed(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    toExponential(buffer, buffer_size, value, decdigits) {\n        const r = value.toExponential(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    // emulates the C lib function -fcvt_s, but doesn't support all ranges of number.\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\n    // Negative exponents must be now smaller than 1e-99\n    // fully-function C version also int he source, but this is the version enabled by default\n    fcvtS(buffer, sizeInBytes, value, fracpart_numdigits, dec, sign // int *\n    ) {\n        if (buffer == 0 || sign == 0 || dec == 0 || sizeInBytes < 1) return 1;\n        let digits;\n        let decpos;\n        let s = 0; // default to positive\n        if (Number.isNaN(value)) {\n            digits = \"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        } else if (!Number.isFinite(value)) {\n            digits = \"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        } else if (value == 0) {\n            digits = \"000000000000000000000000000000000000\".slice(0, fracpart_numdigits);\n            decpos = 0;\n        } else {\n            if (value < 0) {\n                s = 1; // negative\n                value = Math.abs(value);\n            }\n            if (fracpart_numdigits > 100 || value > 1e+21 || value < 1e-99) {\n                this.mod.copyString(buffer, sizeInBytes, \"\");\n                this.mod.mem32[dec] = 0;\n                return 1;\n            }\n            const roundValStr = value.toFixed(fracpart_numdigits);\n            let [intPart = \"\", fracPart = \"\"] = roundValStr.split(\".\");\n            if (intPart == \"0\") intPart = \"\";\n            if (intPart.length > 0) {\n                decpos = intPart.length;\n                digits = intPart + fracPart;\n            } else {\n                digits = fracPart.replace(/^0+/, \"\"); // remove leading zeros\n                decpos = digits.length - fracPart.length;\n            }\n        }\n        if (sizeInBytes - 1 < digits.length) return 1;\n        this.mod.copyString(buffer, sizeInBytes, digits);\n        this.mod.setLong(dec, decpos);\n        this.mod.setLong(sign, s);\n        return 0;\n    /*\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\n\n        let decpos=0;\n        let digits:string;\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\n    \n        if (decpos>0) { // has integer part\n            const intlen=Math.max(decpos, 0);\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\n            digits=nonExponent.replace('.', '');\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\n        }\n        else { // only a fraction\n            const intpart=Math.trunc(value);\n            const fracpart=value-intpart;\n            const prec=fracpart_numdigits- (-decpos);\n            console.log(\"prec=\",prec);\n            if (prec<1) {\n                digits=\"\";\n            }\n            else {\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\n                digits=nonExponent.replace('.', '');\n                digits=digits.replace(/^0+/,\"\");\n            }\n        }\n\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\n        console.log('digits=',digits);\n        console.log('dec=',decpos);\n        console.log(\"sign=\",s);\n    */ }\n}\n\n});\n\n\nparcelRegister(\"5LsZ0\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrCanvas\", () => $4327d2f23f608609$export$2f298dd69cef3c34);\n\nvar $ghrAp = parcelRequire(\"ghrAp\");\n\nvar $47Wdp = parcelRequire(\"47Wdp\");\nvar $4327d2f23f608609$var$D2DType;\n(function(D2DType) {\n    D2DType[D2DType[\"D2D_FILLRECT\"] = 1] = \"D2D_FILLRECT\";\n    D2DType[D2DType[\"D2D_FILLCHAR\"] = 5] = \"D2D_FILLCHAR\";\n    D2DType[D2DType[\"D2D_SETLINEWIDTH\"] = 10] = \"D2D_SETLINEWIDTH\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLE\"] = 11] = \"D2D_SETFILLSTYLE\";\n    D2DType[D2DType[\"D2D_SETFONT\"] = 12] = \"D2D_SETFONT\";\n    D2DType[D2DType[\"D2D_BEGINPATH\"] = 13] = \"D2D_BEGINPATH\";\n    D2DType[D2DType[\"D2D_MOVETO\"] = 14] = \"D2D_MOVETO\";\n    D2DType[D2DType[\"D2D_LINETO\"] = 15] = \"D2D_LINETO\";\n    D2DType[D2DType[\"D2D_FILL\"] = 16] = \"D2D_FILL\";\n    D2DType[D2DType[\"D2D_STROKE\"] = 17] = \"D2D_STROKE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLE\"] = 18] = \"D2D_SETSTROKESTYLE\";\n    D2DType[D2DType[\"D2D_ARC\"] = 19] = \"D2D_ARC\";\n    D2DType[D2DType[\"D2D_STROKERECT\"] = 20] = \"D2D_STROKERECT\";\n    D2DType[D2DType[\"D2D_FILLTEXT\"] = 21] = \"D2D_FILLTEXT\";\n    D2DType[D2DType[\"D2D_IMAGEDATA\"] = 22] = \"D2D_IMAGEDATA\";\n    D2DType[D2DType[\"D2D_PUTIMAGEDATA\"] = 23] = \"D2D_PUTIMAGEDATA\";\n    D2DType[D2DType[\"D2D_BEZIERTO\"] = 24] = \"D2D_BEZIERTO\";\n    D2DType[D2DType[\"D2D_MEASURETEXT\"] = 25] = \"D2D_MEASURETEXT\";\n    D2DType[D2DType[\"D2D_SAVE\"] = 26] = \"D2D_SAVE\";\n    D2DType[D2DType[\"D2D_RESTORE\"] = 27] = \"D2D_RESTORE\";\n    D2DType[D2DType[\"D2D_CREATERADIALGRADIENT\"] = 28] = \"D2D_CREATERADIALGRADIENT\";\n    D2DType[D2DType[\"D2D_SETCOLORSTOP\"] = 29] = \"D2D_SETCOLORSTOP\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLEGRADIENT\"] = 30] = \"D2D_SETFILLSTYLEGRADIENT\";\n    D2DType[D2DType[\"D2D_RELEASEID\"] = 31] = \"D2D_RELEASEID\";\n})($4327d2f23f608609$var$D2DType || ($4327d2f23f608609$var$D2DType = {}));\nclass $4327d2f23f608609$export$2f298dd69cef3c34 {\n    ctx;\n    props = {\n        charWidth: 0,\n        charHeight: 0,\n        foreColor: 0,\n        backColor: 0,\n        widthInChars: 0,\n        heightInChars: 0,\n        canvasHeight: 0,\n        canvasWidth: 0\n    };\n    owner;\n    cmdCompleteSignal;\n    canvasKeys;\n    precomputedObjects;\n    constructor(element, modParams, modbase){\n        const { forecolor: forecolor, backcolor: backcolor, fontsize: fontsize, isd2dcanvas: isd2dcanvas } = modParams;\n        this.owner = modbase;\n        this.props.widthInChars = modParams.windim[0];\n        this.props.heightInChars = modParams.windim[1];\n        if (!this.owner.isWasmModule) {\n            this.cmdCompleteSignal = new (0, $47Wdp.twrSignal)();\n            this.canvasKeys = new (0, $ghrAp.twrSharedCircularBuffer)(); // tsconfig, lib must be set to 2017 or higher\n        }\n        this.precomputedObjects = {};\n        if (element) {\n            if (!element.getContext) throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\n            let c = element.getContext(\"2d\");\n            if (!c) throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\n            c.font = fontsize.toString() + \"px Courier New\";\n            c.textBaseline = \"top\";\n            const sampleText = \"          \";\n            const tm = c.measureText(sampleText);\n            this.props.charWidth = Math.ceil(tm.width / sampleText.length); // ceil rounds up (eg .9 -> 1)\n            let fM = c.measureText(\"X\");\n            this.props.charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\n            if (!isd2dcanvas) {\n                element.width = this.props.charWidth * this.props.widthInChars;\n                element.height = this.props.charHeight * this.props.heightInChars;\n            }\n            this.props.canvasHeight = element.height;\n            this.props.canvasWidth = element.width;\n            //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\n            // reset after dims changed.  Not sure if ctx is needed to rest, but others do\n            let c2 = element.getContext(\"2d\");\n            if (!c2) throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\n            this.ctx = c2;\n            this.ctx.font = fontsize.toString() + \"px Courier New\";\n            this.ctx.textBaseline = \"top\";\n            c2.fillStyle = backcolor;\n            this.props.backColor = Number(\"0x\" + c2.fillStyle.slice(1));\n            c2.fillStyle = forecolor;\n            this.props.foreColor = Number(\"0x\" + c2.fillStyle.slice(1));\n        }\n    //console.log(\"Create New twrCanvas: \",this.isValid(), element, this);\n    //console.log(\"twrCanvas.constructor props: \", this.props);\n    }\n    isValid() {\n        return !!this.ctx;\n    }\n    getProxyParams() {\n        if (!this.cmdCompleteSignal || !this.canvasKeys) throw new Error(\"internal error in getProxyParams.\");\n        return [\n            this.props,\n            this.cmdCompleteSignal.sharedArray,\n            this.canvasKeys.sharedArray\n        ];\n    }\n    getProp(pn) {\n        if (!this.isValid()) console.log(\"internal error - getProp called on invalid twrCanvas\");\n        const propName = this.owner.getString(pn);\n        //console.log(\"enter twrCanvas.getprop: \", pn, propName, this.props[propName], this.props);\n        return this.props[propName];\n    }\n    /* see draw2d.h for structs that match */ drawSeq(ds) {\n        //console.log(\"twr::Canvas enter drawSeq\");\n        if (!this.isValid()) console.log(\"internal error - drawSeq called on invalid twrCanvas\");\n        if (!this.ctx) return;\n        let ins = this.owner.getLong(ds); /* ds->start */ \n        const lastins = this.owner.getLong(ds + 4); /* ds->last */ \n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\n        let next;\n        //let insCount=0;\n        while(true){\n            //insCount++;\n            const type = this.owner.getLong(ins + 4); /* hdr->type */ \n            switch(type){\n                case $4327d2f23f608609$var$D2DType.D2D_FILLRECT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const w = this.owner.getDouble(ins + 24);\n                        const h = this.owner.getDouble(ins + 32);\n                        this.ctx.fillRect(x, y, w, h);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_STROKERECT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const w = this.owner.getDouble(ins + 24);\n                        const h = this.owner.getDouble(ins + 32);\n                        this.ctx.strokeRect(x, y, w, h);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_FILLCHAR:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const c = this.owner.getShort(ins + 24);\n                        let txt = String.fromCharCode(c);\n                        this.ctx.fillText(txt, x, y);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_FILLTEXT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const str = this.owner.getString(this.owner.getLong(ins + 24));\n                        //console.log(\"filltext \",x,y,str)\n                        this.ctx.fillText(str, x, y);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_MEASURETEXT:\n                    {\n                        const str = this.owner.getString(this.owner.getLong(ins + 8));\n                        const tmidx = this.owner.getLong(ins + 12);\n                        const tm = this.ctx.measureText(str);\n                        this.owner.setDouble(tmidx + 0, tm.actualBoundingBoxAscent);\n                        this.owner.setDouble(tmidx + 8, tm.actualBoundingBoxDescent);\n                        this.owner.setDouble(tmidx + 16, tm.actualBoundingBoxLeft);\n                        this.owner.setDouble(tmidx + 24, tm.actualBoundingBoxRight);\n                        this.owner.setDouble(tmidx + 32, tm.fontBoundingBoxAscent);\n                        this.owner.setDouble(tmidx + 40, tm.fontBoundingBoxDescent);\n                        this.owner.setDouble(tmidx + 48, tm.width);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETFONT:\n                    {\n                        const str = this.owner.getString(this.owner.getLong(ins + 8));\n                        this.ctx.font = str;\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETFILLSTYLE:\n                    {\n                        const color = this.owner.getLong(ins + 8);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.fillStyle = cssColor;\n                    //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETSTROKESTYLE:\n                    {\n                        const color = this.owner.getLong(ins + 8);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETLINEWIDTH:\n                    {\n                        const width = this.owner.getShort(ins + 8);\n                        this.ctx.lineWidth = width;\n                    //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_MOVETO:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        this.ctx.moveTo(x, y);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_LINETO:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        this.ctx.lineTo(x, y);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_BEZIERTO:\n                    {\n                        const cp1x = this.owner.getDouble(ins + 8);\n                        const cp1y = this.owner.getDouble(ins + 16);\n                        const cp2x = this.owner.getDouble(ins + 24);\n                        const cp2y = this.owner.getDouble(ins + 32);\n                        const x = this.owner.getDouble(ins + 40);\n                        const y = this.owner.getDouble(ins + 48);\n                        this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_BEGINPATH:\n                    this.ctx.beginPath();\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_FILL:\n                    this.ctx.fill();\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SAVE:\n                    this.ctx.save();\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_RESTORE:\n                    this.ctx.restore();\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_STROKE:\n                    this.ctx.stroke();\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_ARC:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const radius = this.owner.getDouble(ins + 24);\n                        const startAngle = this.owner.getDouble(ins + 32);\n                        const endAngle = this.owner.getDouble(ins + 40);\n                        const counterClockwise = this.owner.getLong(ins + 48) != 0;\n                        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_IMAGEDATA:\n                    {\n                        const start = this.owner.getLong(ins + 8);\n                        const length = this.owner.getLong(ins + 12);\n                        const width = this.owner.getLong(ins + 16);\n                        const height = this.owner.getLong(ins + 20);\n                        const id = this.owner.getLong(ins + 24);\n                        if (id in this.precomputedObjects) console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\n                        if (this.owner.isWasmModule) {\n                            const z = new Uint8ClampedArray(this.owner.memory.buffer, start, length);\n                            this.precomputedObjects[id] = new ImageData(z, width, height);\n                        } else this.precomputedObjects[id] = {\n                            mem8: new Uint8Array(this.owner.memory.buffer, start, length),\n                            width: width,\n                            height: height\n                        };\n                    //console.log(\"D2D_IMAGEDATA\",start, length, width, height, this.imageData[start]);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_CREATERADIALGRADIENT:\n                    {\n                        const x0 = this.owner.getDouble(ins + 8);\n                        const y0 = this.owner.getDouble(ins + 16);\n                        const radius0 = this.owner.getDouble(ins + 24);\n                        const x1 = this.owner.getDouble(ins + 32);\n                        const y1 = this.owner.getDouble(ins + 40);\n                        const radius1 = this.owner.getDouble(ins + 48);\n                        const id = this.owner.getLong(ins + 56);\n                        let gradient = this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\n                        if (id in this.precomputedObjects) console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETCOLORSTOP:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        const pos = this.owner.getLong(ins + 12);\n                        const cssColor = this.owner.getString(this.owner.getLong(ins + 16));\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        gradient.addColorStop(pos, cssColor);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_SETFILLSTYLEGRADIENT:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        this.ctx.fillStyle = gradient;\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_RELEASEID:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        if (this.precomputedObjects[id]) delete this.precomputedObjects[id];\n                        else console.log(\"warning: D2D_RELEASEID with undefined ID \", id);\n                    }\n                    break;\n                case $4327d2f23f608609$var$D2DType.D2D_PUTIMAGEDATA:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        const dx = this.owner.getLong(ins + 12);\n                        const dy = this.owner.getLong(ins + 16);\n                        const dirtyX = this.owner.getLong(ins + 20);\n                        const dirtyY = this.owner.getLong(ins + 24);\n                        const dirtyWidth = this.owner.getLong(ins + 28);\n                        const dirtyHeight = this.owner.getLong(ins + 32);\n                        if (!(id in this.precomputedObjects)) throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \" + id);\n                        //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\n                        let imgData;\n                        if (this.owner.isWasmModule) //console.log(\"D2D_PUTIMAGEDATA isWasmModule\");\n                        imgData = this.precomputedObjects[id];\n                        else {\n                            //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\n                            const z = this.precomputedObjects[id]; // Uint8Array\n                            const ca = Uint8ClampedArray.from(z.mem8); // shallow copy\n                            imgData = new ImageData(ca, z.width, z.height);\n                        }\n                        if (dirtyWidth == 0 && dirtyHeight == 0) this.ctx.putImageData(imgData, dx, dy);\n                        else this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n                    }\n                    break;\n                default:\n                    throw new Error(\"unimplemented or unknown Sequence Type in drawSeq: \" + type);\n            }\n            next = this.owner.getLong(ins); /* hdr->next */ \n            if (next == 0) {\n                if (ins != lastins) throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\n                break;\n            }\n            ins = next;\n        }\n        if (this.cmdCompleteSignal) this.cmdCompleteSignal.signal();\n    //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\n    }\n}\nclass $4327d2f23f608609$export$c779b2cd00544976 {\n    canvasKeys;\n    drawCompleteSignal;\n    props;\n    owner;\n    constructor(params, owner){\n        const [props, signalBuffer, canvasKeysBuffer] = params;\n        this.drawCompleteSignal = new (0, $47Wdp.twrSignal)(signalBuffer);\n        this.canvasKeys = new (0, $ghrAp.twrSharedCircularBuffer)(canvasKeysBuffer);\n        this.props = props;\n        this.owner = owner;\n    //console.log(\"Create New twrCanvasProxy: \",this.props)\n    }\n    charIn() {\n        //ctx.commit(); not avail in chrome\n        //postMessage([\"debug\", 'x']);\n        return this.canvasKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.canvasKeys.isEmpty()) return 0;\n        else return this.charIn();\n    }\n    getProp(pn) {\n        const propName = this.owner.getString(pn);\n        //console.log(\"enter twrCanvasProxy.getprop: \", pn, propName, this.props[propName], this.props);\n        return this.props[propName];\n    }\n    drawSeq(ds) {\n        this.drawCompleteSignal.reset();\n        postMessage([\n            \"drawseq\",\n            [\n                ds\n            ]\n        ]);\n        this.drawCompleteSignal.wait();\n    }\n}\n\n});\nparcelRegister(\"47Wdp\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrSignal\", () => $3014f93b5ceae902$export$e37a7b7b851b97f3);\n//\n// This class implements a simple signal/wait mechanism\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\n//\nvar $3014f93b5ceae902$var$twrSignalState;\n(function(twrSignalState) {\n    twrSignalState[twrSignalState[\"WAITING\"] = 0] = \"WAITING\";\n    twrSignalState[twrSignalState[\"SIGNALED\"] = 1] = \"SIGNALED\";\n})($3014f93b5ceae902$var$twrSignalState || ($3014f93b5ceae902$var$twrSignalState = {}));\nclass $3014f93b5ceae902$export$e37a7b7b851b97f3 {\n    sharedArray;\n    buf;\n    constructor(sa){\n        if (typeof window !== \"undefined\") {\n            if (!crossOriginIsolated && !(window.location.protocol === \"file:\")) throw new Error(\"twrSignal constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa) this.sharedArray = sa;\n        else this.sharedArray = new SharedArrayBuffer(4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[0] = $3014f93b5ceae902$var$twrSignalState.WAITING;\n    }\n    signal() {\n        this.buf[0] = $3014f93b5ceae902$var$twrSignalState.SIGNALED;\n        //console.log(\"about to signal\");\n        Atomics.notify(this.buf, 0);\n    }\n    wait() {\n        if (this.buf[0] == $3014f93b5ceae902$var$twrSignalState.WAITING) //console.log(\"waiting...\");\n        Atomics.wait(this.buf, 0, $3014f93b5ceae902$var$twrSignalState.WAITING);\n    }\n    isSignaled() {\n        return this.buf[0] == $3014f93b5ceae902$var$twrSignalState.SIGNALED;\n    }\n    reset() {\n        this.buf[0] = $3014f93b5ceae902$var$twrSignalState.WAITING;\n    }\n}\n\n});\n\n\n\nparcelRegister(\"lsUl2\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrTimeImpl\", () => $fa07ea1a08a5d6be$export$78724cdcf7ebea1d);\nfunction $fa07ea1a08a5d6be$export$78724cdcf7ebea1d() {\n    return Date.now();\n}\n\n});\n\n\nparcelRegister(\"baOio\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWasmModuleAsync\", () => $8227a48f951b1cca$export$678fe6e36ab9a6ff);\n\nvar $9FI45 = parcelRequire(\"9FI45\");\n\nvar $aGUWE = parcelRequire(\"aGUWE\");\n\nvar $2vKdq = parcelRequire(\"2vKdq\");\n\nvar $bqeaG = parcelRequire(\"bqeaG\");\n\nclass $8227a48f951b1cca$export$678fe6e36ab9a6ff extends (0, $aGUWE.twrWasmModuleInJSMain) {\n    myWorker;\n    malloc;\n    loadWasmResolve;\n    loadWasmReject;\n    executeCResolve;\n    executeCReject;\n    initLW = false;\n    waitingcalls;\n    constructor(opts){\n        super(opts);\n        this.malloc = (size)=>{\n            throw new Error(\"Error - un-init malloc called.\");\n        };\n        if (!window.Worker) throw new Error(\"This browser doesn't support web workers.\");\n        this.myWorker = new Worker((parcelRequire(\"aRHnW\")));\n        this.myWorker.onmessage = this.processMsg.bind(this);\n    }\n    // overrides base implementation\n    async loadWasm(pathToLoad) {\n        if (this.initLW) throw new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\n        this.initLW = true;\n        return new Promise((resolve, reject)=>{\n            this.loadWasmResolve = resolve;\n            this.loadWasmReject = reject;\n            this.malloc = (size)=>{\n                return this.executeCImpl(\"twr_malloc\", [\n                    size\n                ]);\n            };\n            this.waitingcalls = new (0, $2vKdq.twrWaitingCalls)(); // handle's calls that cross the worker thread - main js thread boundary\n            let canvas;\n            if (this.d2dcanvas.isValid()) canvas = this.d2dcanvas;\n            else canvas = this.iocanvas;\n            const modWorkerParams = {\n                divProxyParams: this.iodiv.getProxyParams(),\n                canvasProxyParams: canvas.getProxyParams(),\n                waitingCallsProxyParams: this.waitingcalls.getProxyParams()\n            };\n            const urlToLoad = new URL(pathToLoad, document.URL);\n            const startMsg = {\n                urlToLoad: urlToLoad.href,\n                modWorkerParams: modWorkerParams,\n                modParams: this.modParams\n            };\n            this.myWorker.postMessage([\n                \"startup\",\n                startMsg\n            ]);\n        });\n    }\n    async executeC(params) {\n        const cparams = await this.preCallC(params); // will also validate params[0]\n        return this.executeCImpl(params[0], cparams);\n    }\n    async executeCImpl(fname, cparams = []) {\n        return new Promise((resolve, reject)=>{\n            this.executeCResolve = resolve;\n            this.executeCReject = reject;\n            this.myWorker.postMessage([\n                \"executeC\",\n                fname,\n                cparams\n            ]);\n        });\n    }\n    // this function should be called from HTML \"keydown\" event from <div>\n    keyDownDiv(ev) {\n        if (!this.iodiv || !this.iodiv.divKeys) throw new Error(\"unexpected undefined twrWasmAsyncModule.divKeys\");\n        this.iodiv.divKeys.write((0, $bqeaG.default)(ev).char.charCodeAt(0));\n    }\n    // this function should be called from HTML \"keydown\" event from <canvas>\n    keyDownCanvas(ev) {\n        if (!this.iocanvas || !this.iocanvas.canvasKeys) throw new Error(\"unexpected undefined twrWasmAsyncModule.canvasKeys\");\n        this.iocanvas.canvasKeys.write((0, $bqeaG.default)(ev).char.charCodeAt(0));\n    }\n    processMsg(event) {\n        const msgType = event.data[0];\n        const d = event.data[1];\n        //console.log(\"twrWasmAsyncModule - got message: \"+event.data)\n        switch(msgType){\n            case \"divout\":\n                if (this.iodiv.isValid()) this.iodiv.charOut(d);\n                else console.log(\"error - msg divout received but iodiv is undefined.\");\n                break;\n            case \"debug\":\n                (0, $9FI45.twrDebugLogImpl)(d);\n                break;\n            case \"drawseq\":\n                {\n                    //console.log(\"twrModAsync got message drawseq\");\n                    const [ds] = d;\n                    if (this.iocanvas.isValid()) this.iocanvas.drawSeq(ds);\n                    else if (this.d2dcanvas.isValid()) this.d2dcanvas.drawSeq(ds);\n                    else throw new Error(\"msg drawseq received but canvas is undefined.\");\n                    break;\n                }\n            case \"setmemory\":\n                this.memory = d;\n                if (!this.memory) throw new Error(\"unexpected error - undefined memory in startupOkay msg\");\n                this.mem8 = new Uint8Array(this.memory.buffer);\n                this.mem32 = new Uint32Array(this.memory.buffer);\n                this.memD = new Float64Array(this.memory.buffer);\n                break;\n            case \"startupFail\":\n                if (this.loadWasmReject) this.loadWasmReject(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\n                break;\n            case \"startupOkay\":\n                if (this.loadWasmResolve) this.loadWasmResolve(undefined);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\n                break;\n            case \"executeCFail\":\n                if (this.executeCReject) this.executeCReject(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCReject)\");\n                break;\n            case \"executeCOkay\":\n                if (this.executeCResolve) this.executeCResolve(d);\n                else throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCResolve)\");\n                break;\n            default:\n                if (!this.waitingcalls) throw new Error(\"internal error: this.waitingcalls undefined.\");\n                if (!this.waitingcalls.processMessage(msgType, d)) throw new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \" + msgType);\n        }\n    }\n}\n\n});\nparcelRegister(\"2vKdq\", function(module, exports) {\n\n$parcel$export(module.exports, \"twrWaitingCalls\", () => $1d42537681d02be3$export$9e37856d1928d388);\n\nvar $47Wdp = parcelRequire(\"47Wdp\");\n\nvar $lsUl2 = parcelRequire(\"lsUl2\");\nclass $1d42537681d02be3$export$9e37856d1928d388 {\n    callCompleteSignal;\n    parameters;\n    constructor(){\n        this.callCompleteSignal = new (0, $47Wdp.twrSignal)();\n        this.parameters = new Uint32Array(new SharedArrayBuffer(4));\n    }\n    startSleep(ms) {\n        setTimeout(()=>{\n            this.callCompleteSignal.signal();\n        }, ms);\n    }\n    time() {\n        const ms = (0, $lsUl2.twrTimeImpl)();\n        this.parameters[0] = ms;\n        this.callCompleteSignal.signal();\n    }\n    getProxyParams() {\n        return [\n            this.callCompleteSignal.sharedArray,\n            this.parameters.buffer\n        ];\n    }\n    processMessage(msgType, data) {\n        switch(msgType){\n            case \"sleep\":\n                const [ms] = data;\n                this.startSleep(ms);\n                break;\n            case \"time\":\n                this.time();\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n}\nclass $1d42537681d02be3$export$78d2a4633fe89379 {\n    callCompleteSignal;\n    parameters;\n    constructor(params){\n        this.callCompleteSignal = new (0, $47Wdp.twrSignal)(params[0]);\n        this.parameters = new Uint32Array(params[1]);\n    }\n    sleep(ms) {\n        this.callCompleteSignal.reset();\n        postMessage([\n            \"sleep\",\n            [\n                ms\n            ]\n        ]);\n        this.callCompleteSignal.wait();\n    }\n    time() {\n        this.callCompleteSignal.reset();\n        postMessage([\n            \"time\"\n        ]);\n        this.callCompleteSignal.wait();\n        return this.parameters[0];\n    }\n}\n\n});\n\nparcelRegister(\"bqeaG\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $850d1d8f0aa1ea8f$export$2e2bcd8739ae039);\nconst $850d1d8f0aa1ea8f$var$keycodeCtrlKeys = {\n    \"a\": \"selectAll\",\n    \"c\": \"copy\",\n    \"s\": \"save\",\n    \"v\": \"paste\",\n    \"x\": \"cut\",\n    \"y\": \"redo\",\n    \"z\": \"undo\"\n};\nconst $850d1d8f0aa1ea8f$var$keycodeShiftedKeys = {\n    \"/\": \"?\",\n    \".\": \">\",\n    \",\": \"<\",\n    \"'\": '\"',\n    \";\": \":\",\n    \"[\": \"{\",\n    \"]\": \"}\",\n    \"\\\\\": \"|\",\n    \"`\": \"~\",\n    \"=\": \"+\",\n    \"-\": \"_\",\n    \"1\": \"!\",\n    \"2\": \"@\",\n    \"3\": \"#\",\n    \"4\": \"$\",\n    \"5\": \"%\",\n    \"6\": \"^\",\n    \"7\": \"&\",\n    \"8\": \"*\",\n    \"9\": \"(\",\n    \"0\": \")\",\n    \"a\": \"A\",\n    \"b\": \"B\",\n    \"c\": \"C\",\n    \"d\": \"D\",\n    \"e\": \"E\",\n    \"f\": \"F\",\n    \"g\": \"G\",\n    \"h\": \"H\",\n    \"i\": \"I\",\n    \"j\": \"J\",\n    \"k\": \"K\",\n    \"l\": \"L\",\n    \"m\": \"M\",\n    \"n\": \"N\",\n    \"o\": \"O\",\n    \"p\": \"P\",\n    \"q\": \"q\",\n    \"r\": \"R\",\n    \"s\": \"S\",\n    \"t\": \"T\",\n    \"u\": \"U\",\n    \"v\": \"V\",\n    \"w\": \"W\",\n    \"x\": \"X\",\n    \"y\": \"Y\",\n    \"z\": \"Z\"\n};\nconst $850d1d8f0aa1ea8f$var$keyCodeUnshiftedKeys = {};\nfor(const x in $850d1d8f0aa1ea8f$var$keycodeShiftedKeys){\n    const shiftedKey = $850d1d8f0aa1ea8f$var$keycodeShiftedKeys[x];\n    $850d1d8f0aa1ea8f$var$keyCodeUnshiftedKeys[shiftedKey] = x;\n}\nconst $850d1d8f0aa1ea8f$var$keydownKeycodeDictionary = {\n    0: \"\\\\\",\n    8: \"backspace\",\n    9: \"tab\",\n    12: \"num\",\n    13: \"enter\",\n    16: \"shift\",\n    17: \"ctrl\",\n    18: \"alt\",\n    19: \"pause\",\n    20: \"caps\",\n    27: \"esc\",\n    32: \" \",\n    33: \"pageup\",\n    34: \"pagedown\",\n    35: \"end\",\n    36: \"home\",\n    37: \"left\",\n    38: \"up\",\n    39: \"right\",\n    40: \"down\",\n    44: \"print\",\n    45: \"insert\",\n    46: \"delete\",\n    48: \"0\",\n    49: \"1\",\n    50: \"2\",\n    51: \"3\",\n    52: \"4\",\n    53: \"5\",\n    54: \"6\",\n    55: \"7\",\n    56: \"8\",\n    57: \"9\",\n    59: \";\",\n    61: \"=\",\n    65: \"a\",\n    66: \"b\",\n    67: \"c\",\n    68: \"d\",\n    69: \"e\",\n    70: \"f\",\n    71: \"g\",\n    72: \"h\",\n    73: \"i\",\n    74: \"j\",\n    75: \"k\",\n    76: \"l\",\n    77: \"m\",\n    78: \"n\",\n    79: \"o\",\n    80: \"p\",\n    81: \"q\",\n    82: \"r\",\n    83: \"s\",\n    84: \"t\",\n    85: \"u\",\n    86: \"v\",\n    87: \"w\",\n    88: \"x\",\n    89: \"y\",\n    90: \"z\",\n    91: \"meta\",\n    92: \"meta\",\n    93: \"meta\",\n    96: \"num0\",\n    97: \"num1\",\n    98: \"num2\",\n    99: \"num3\",\n    100: \"num4\",\n    101: \"num5\",\n    102: \"num6\",\n    103: \"num7\",\n    104: \"num8\",\n    105: \"num9\",\n    106: \"*\",\n    107: \"+\",\n    108: \"num_enter\",\n    109: \"num_subtract\",\n    110: \"num_decimal\",\n    111: \"num_divide\",\n    112: \"f1\",\n    113: \"f2\",\n    114: \"f3\",\n    115: \"f4\",\n    116: \"f5\",\n    117: \"f6\",\n    118: \"f7\",\n    119: \"f8\",\n    120: \"f9\",\n    121: \"f10\",\n    122: \"f11\",\n    123: \"f12\",\n    124: \"print\",\n    144: \"num\",\n    145: \"scroll\",\n    173: \"-\",\n    186: \";\",\n    187: \"=\",\n    188: \",\",\n    189: \"-\",\n    190: \".\",\n    191: \"/\",\n    192: \"`\",\n    219: \"[\",\n    220: \"\\\\\",\n    221: \"]\",\n    222: \"'\",\n    223: \"`\",\n    224: \"cmd\",\n    225: \"alt\",\n    57392: \"ctrl\",\n    63289: \"num\"\n};\nconst $850d1d8f0aa1ea8f$var$keypressCharacterMapOverides = {\n    \"\\r\": \"enter\"\n};\nconst $850d1d8f0aa1ea8f$var$keypressCharacterMap = JSON.parse(JSON.stringify($850d1d8f0aa1ea8f$var$keydownKeycodeDictionary));\nfor (const key of Object.keys($850d1d8f0aa1ea8f$var$keypressCharacterMapOverides))$850d1d8f0aa1ea8f$var$keypressCharacterMap[key] = $850d1d8f0aa1ea8f$var$keypressCharacterMapOverides[key];\nconst $850d1d8f0aa1ea8f$var$keydownCharacterMap = {\n    \"num_subtract\": \"-\",\n    \"num_enter\": \"\\n\",\n    \"num_decimal\": \".\",\n    \"num_divide\": \"/\",\n    \"enter\": \"\\n\",\n    \"tab\": \"\t\",\n    \"backspace\": \"\\b\"\n};\nconst $850d1d8f0aa1ea8f$export$d1477772898aaa70 = [\n    \"backspace\",\n    \"enter\",\n    \"tab\",\n    \"num\",\n    \"shift\",\n    \"meta\",\n    \"alt\",\n    \"pause\",\n    \"caps\",\n    \"esc\",\n    \"pageup\",\n    \"pagedown\",\n    \"end\",\n    \"home\",\n    \"left\",\n    \"up\",\n    \"right\",\n    \"down\",\n    \"print\",\n    \"insert\",\n    \"delete\",\n    \"cmd\",\n    \"f1\",\n    \"f2\",\n    \"f3\",\n    \"f4\",\n    \"f5\",\n    \"f6\",\n    \"f7\",\n    \"f8\",\n    \"f9\",\n    \"f10\",\n    \"f11\",\n    \"f12\",\n    \"scroll\",\n    \"ctrl\"\n];\nconst $850d1d8f0aa1ea8f$var$validEvents = [\n    \"keydown\",\n    \"keyup\"\n];\nconst $850d1d8f0aa1ea8f$var$isMobile = ()=>{\n    const ua = navigator.userAgent;\n    const mobile = /IEMobile|Windows Phone|Lumia/i.test(ua) ? \"w\" : /iPhone|iP[oa]d/.test(ua) ? \"i\" : /Android/.test(ua) ? \"a\" : /BlackBerry|PlayBook|BB10/.test(ua) ? \"b\" : /Mobile Safari/.test(ua) ? \"s\" : /webOS|Mobile|Tablet|Opera Mini|\\bCrMo\\/|Opera Mobi/i.test(ua) ? 1 : 0;\n    return mobile !== 0;\n};\nfunction $850d1d8f0aa1ea8f$var$getKeypressKeycodeValue(charcode) {\n    const character = String.fromCharCode(charcode);\n    if ($850d1d8f0aa1ea8f$var$isMobile()) return character;\n    if (character in $850d1d8f0aa1ea8f$var$keyCodeUnshiftedKeys) return $850d1d8f0aa1ea8f$var$keyCodeUnshiftedKeys[character];\n    else if (character in $850d1d8f0aa1ea8f$var$keypressCharacterMap) return $850d1d8f0aa1ea8f$var$keypressCharacterMap[character];\n    return character;\n}\nfunction $850d1d8f0aa1ea8f$export$2e2bcd8739ae039(event) {\n    let key;\n    if (event.type === \"keypress\" && !$850d1d8f0aa1ea8f$var$isMobile()) key = $850d1d8f0aa1ea8f$var$getKeypressKeycodeValue(event.charCode);\n    else if (event.type === \"keypress\" && $850d1d8f0aa1ea8f$var$isMobile()) key = $850d1d8f0aa1ea8f$var$getKeypressKeycodeValue(event.keyCode);\n    else if ($850d1d8f0aa1ea8f$var$validEvents.indexOf(event.type) > -1) {\n        if (event.which !== undefined) key = $850d1d8f0aa1ea8f$var$keydownKeycodeDictionary[event.which];\n        else if (event.keyCode !== undefined) key = $850d1d8f0aa1ea8f$var$keydownKeycodeDictionary[event.keyCode];\n        else key = \"enter\";\n    } else return false;\n    let char = key;\n    if (event.shiftKey && key in $850d1d8f0aa1ea8f$var$keycodeShiftedKeys) char = $850d1d8f0aa1ea8f$var$keycodeShiftedKeys[key];\n    else if (event.ctrlKey && key in $850d1d8f0aa1ea8f$var$keycodeCtrlKeys) char = $850d1d8f0aa1ea8f$var$keycodeCtrlKeys[key];\n    else if (key in $850d1d8f0aa1ea8f$var$keydownCharacterMap) char = $850d1d8f0aa1ea8f$var$keydownCharacterMap[key];\n    return {\n        char: char,\n        key: key\n    };\n}\n\n});\n\nparcelRegister(\"aRHnW\", function(module, exports) {\n\nvar $hoqmg = parcelRequire(\"hoqmg\");\nlet $7e9081fcee88b005$var$url = new URL(\"twrmodworker.2c672dbb.js\", import.meta.url);\nmodule.exports = $hoqmg($7e9081fcee88b005$var$url.toString(), $7e9081fcee88b005$var$url.origin, true);\n\n});\nparcelRegister(\"hoqmg\", function(module, exports) {\n\"use strict\";\nmodule.exports = function(workerUrl, origin, isESM) {\n    if (origin === self.location.origin) // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n    else {\n        // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n        var source = isESM ? \"import \" + JSON.stringify(workerUrl) + \";\" : \"importScripts(\" + JSON.stringify(workerUrl) + \");\";\n        return URL.createObjectURL(new Blob([\n            source\n        ], {\n            type: \"application/javascript\"\n        }));\n    }\n};\n\n});\n\n\n\n\nvar $49087e929fab6e62$exports = {};\n\n(parcelRequire(\"eZoLj\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"kjr0c\",\"index.ada3d4bb.js\",\"cTHdP\",\"twrmodworker.2c672dbb.js\"]'));\n\n\n//# sourceMappingURL=index.ada3d4bb.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","import {twrWasmModule} from \"./twrmod.js\";\r\nimport {IModOpts, IModInWorkerParams, TStdioVals} from \"./twrmodbase.js\"\r\nimport {twrWasmModuleAsync} from \"./twrmodasync.js\";\r\n\r\nexport {IModOpts, TStdioVals, IModInWorkerParams};\r\nexport {twrWasmModule};\r\nexport {twrWasmModuleAsync};\r\n\r\n","import { twrDebugLogImpl } from \"./twrdebug.js\";\nimport { twrWasmModuleInJSMain } from \"./twrmodjsmain.js\";\nimport { twrTimeImpl } from \"./twrdate.js\";\nexport class twrWasmModule extends twrWasmModuleInJSMain {\n    malloc;\n    constructor(opts = {}) {\n        super(opts, true);\n        this.malloc = (size) => { throw new Error(\"error - un-init malloc called\"); };\n        let canvas;\n        if (this.d2dcanvas.isValid())\n            canvas = this.d2dcanvas;\n        else\n            canvas = this.iocanvas;\n        this.modParams.imports = {\n            twrDebugLog: twrDebugLogImpl,\n            twrTime: twrTimeImpl,\n            twrDivCharOut: this.iodiv.charOut.bind(this.iodiv),\n            twrCanvasGetProp: canvas.getProp.bind(canvas),\n            twrCanvasDrawSeq: canvas.drawSeq.bind(canvas),\n            twrCanvasCharIn: this.null,\n            twrCanvasInkey: this.null,\n            twrDivCharIn: this.null,\n            twrSleep: this.null,\n            twrSin: Math.sin,\n            twrCos: Math.cos,\n            twrTan: Math.tan,\n            twrFAbs: Math.abs,\n            twrACos: Math.acos,\n            twrASin: Math.asin,\n            twrATan: Math.atan,\n            twrExp: Math.exp,\n            twrFloor: Math.floor,\n            twrCeil: Math.ceil,\n            twrFMod: function (x, y) { return x % y; },\n            twrLog: Math.log,\n            twrPow: Math.pow,\n            twrSqrt: Math.sqrt,\n            twrTrunc: Math.trunc,\n            twrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\n            twrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\n            twrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\n            twrAtod: this.floatUtil.atod.bind(this.floatUtil),\n            twrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil),\n        };\n    }\n    null(inval) {\n        throw new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\n    }\n}\n//# sourceMappingURL=twrmod.js.map","import {twrDebugLogImpl} from \"./twrdebug.js\"\r\nimport {IModOpts} from \"./twrmodbase.js\";\r\nimport {twrWasmModuleInJSMain} from \"./twrmodjsmain.js\"\r\nimport {twrCanvas} from \"./twrcanvas.js\";\r\nimport {twrTimeImpl} from \"./twrdate.js\"\r\n\r\n\r\n\r\nexport class twrWasmModule extends twrWasmModuleInJSMain {\r\n\t malloc:(size:number)=>Promise<number>;\r\n\r\n\r\n\tconstructor(opts:IModOpts={}) {\r\n\t\tsuper(opts, true);\r\n\t\tthis.malloc=(size:number)=>{throw new Error(\"error - un-init malloc called\")};\r\n\t\t\r\n\t\tlet canvas:twrCanvas;\r\n\t\tif (this.d2dcanvas.isValid()) canvas=this.d2dcanvas;\r\n\t\telse canvas=this.iocanvas;\r\n\r\n\t\tthis.modParams.imports={\r\n\t\t\ttwrDebugLog:twrDebugLogImpl,\r\n\t\t\ttwrTime:twrTimeImpl,\r\n\t\t\ttwrDivCharOut:this.iodiv.charOut.bind(this.iodiv),\r\n\t\t\ttwrCanvasGetProp:canvas.getProp.bind(canvas),\r\n\t\t\ttwrCanvasDrawSeq:canvas.drawSeq.bind(canvas),\r\n\t\t\ttwrCanvasCharIn:this.null,\r\n\t\t\ttwrCanvasInkey:this.null,\r\n\t\t\ttwrDivCharIn:this.null,\r\n\t\t\ttwrSleep:this.null,\r\n\r\n\t\t\ttwrSin:Math.sin,\r\n\t\t\ttwrCos:Math.cos,\r\n\t\t\ttwrTan: Math.tan,\r\n\t\t\ttwrFAbs: Math.abs,\r\n\t\t\ttwrACos: Math.acos,\r\n\t\t\ttwrASin: Math.asin,\r\n\t\t\ttwrATan: Math.atan,\r\n\t\t\ttwrExp: Math.exp,\r\n\t\t\ttwrFloor: Math.floor,\r\n\t\t\ttwrCeil: Math.ceil,\r\n\t\t\ttwrFMod: function(x:number, y:number) {return x%y},\r\n\t\t\ttwrLog: Math.log,\r\n\t\t\ttwrPow: Math.pow,\r\n\t\t\ttwrSqrt: Math.sqrt,\r\n\t\t\ttwrTrunc: Math.trunc,\r\n\r\n\t\t\ttwrDtoa: this.floatUtil.dtoa.bind(this.floatUtil),\r\n\t\t\ttwrToFixed: this.floatUtil.toFixed.bind(this.floatUtil),\r\n\t\t\ttwrToExponential: this.floatUtil.toExponential.bind(this.floatUtil),\r\n\t\t\ttwrAtod: this.floatUtil.atod.bind(this.floatUtil),\r\n\t\t\ttwrFcvtS: this.floatUtil.fcvtS.bind(this.floatUtil),\r\n\t\t}\r\n\t}\r\n\r\n\tnull(inval?:any) {\r\n\t\tthrow new Error(\"call to unimplemented twrXXX import in twrWasmModule.  Use twrWasmModuleAsync ?\");\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n","let logline = \"\";\nexport function twrDebugLogImpl(char) {\n    if (char == 10 || char == 3) { // ASCII 03 is End-of-Text, and is used here to indicate the preceding char should be printed\n        console.log(logline); // ideally without a linefeed, but there is no way to not have a LF with console.log API.\n        logline = \"\";\n    }\n    else {\n        logline = logline + String.fromCharCode(char);\n        if (logline.length >= 200) {\n            console.log(logline);\n            logline = \"\";\n        }\n    }\n}\n// ************************************************************************\n// debugLog doesn't currently wait for the message to log, it returns immediately.\n// I could move this to be in the twrWaitingCalls class\nexport function twrDebugLogProxy(ch) {\n    postMessage([\"debug\", ch]);\n}\n//# sourceMappingURL=twrdebug.js.map","\r\nlet logline=\"\";\r\nexport function twrDebugLogImpl(char:number) {\r\n\tif (char==10 || char==3) {  // ASCII 03 is End-of-Text, and is used here to indicate the preceding char should be printed\r\n\t\tconsole.log(logline);\t// ideally without a linefeed, but there is no way to not have a LF with console.log API.\r\n\t\tlogline=\"\";\r\n\t}\r\n\telse {\r\n\t\tlogline=logline+String.fromCharCode(char);\r\n\t\tif (logline.length>=200) {\r\n\t\t\tconsole.log(logline);\r\n\t\t\tlogline=\"\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// ************************************************************************\r\n// debugLog doesn't currently wait for the message to log, it returns immediately.\r\n// I could move this to be in the twrWaitingCalls class\r\nexport function twrDebugLogProxy(ch:number) {\r\n    postMessage([\"debug\", ch]);\r\n}\r\n\r\n","// This class extends base to handle options when called in the main Java Script thread\nimport { twrDiv } from \"./twrdiv.js\";\nimport { twrWasmModuleBase } from \"./twrmodbase.js\";\nimport { twrCanvas } from \"./twrcanvas.js\";\nexport class twrWasmModuleInJSMain extends twrWasmModuleBase {\n    iocanvas;\n    d2dcanvas;\n    iodiv;\n    modParams;\n    constructor(opts = {}, isWasmModule = false) {\n        super(isWasmModule);\n        if (typeof document === 'undefined')\n            throw new Error(\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\n        const eiodiv = document.getElementById(\"twr_iodiv\");\n        const eiocanvas = document.getElementById(\"twr_iocanvas\");\n        const ed2dcanvas = document.getElementById(\"twr_d2dcanvas\");\n        if (eiocanvas && ed2dcanvas)\n            throw new Error(\"Both twr_iocanvas and twr_d2dcanvas defined. Currently only one canvas allowed.\");\n        if (opts.stdio == 'div' && !eiodiv)\n            throw new Error(\"twrWasmModuleBase opts=='div' but twr_iodiv not defined\");\n        if (opts.stdio == 'canvas' && !eiocanvas)\n            throw new Error(\"twrWasmModuleBase, opts=='canvas' but twr_iocanvas not defined\");\n        if (opts.isd2dcanvas && !ed2dcanvas)\n            throw new Error(\"twrWasmModuleBase, opts.isdrawcanvas==true but twr_d2dcanvas not defined\");\n        // set default opts based on elements found\n        if (eiodiv)\n            opts = { stdio: \"div\", ...opts };\n        else if (eiocanvas)\n            opts = { stdio: \"canvas\", ...opts };\n        else\n            opts = { stdio: \"debug\", ...opts };\n        if (!eiodiv && !eiocanvas)\n            console.log(\"Since neither twr_iocanvas nor twr_iodiv is defined, stdout directed to debug console.\");\n        else\n            console.log('tiny-wasm-runtime: stdio set to: ', opts.stdio);\n        if (eiocanvas)\n            opts = { windim: [64, 16], ...opts };\n        else\n            opts = { windim: [0, 0], ...opts };\n        if (!opts.imports)\n            opts.imports = {};\n        let styleIsDefault = false;\n        if (!opts.backcolor) {\n            styleIsDefault = true;\n            opts.backcolor = \"black\";\n        }\n        if (!opts.forecolor) {\n            styleIsDefault = true;\n            opts.forecolor = \"white\";\n        }\n        if (!opts.fontsize) {\n            styleIsDefault = true;\n            opts.fontsize = 16;\n        }\n        if (opts.isd2dcanvas === undefined) {\n            if (ed2dcanvas)\n                opts.isd2dcanvas = true;\n            else\n                opts.isd2dcanvas = false;\n        }\n        this.modParams = {\n            stdio: opts.stdio,\n            windim: opts.windim,\n            imports: opts.imports,\n            forecolor: opts.forecolor,\n            backcolor: opts.backcolor,\n            styleIsDefault: styleIsDefault,\n            fontsize: opts.fontsize,\n            isd2dcanvas: opts.isd2dcanvas\n        };\n        this.iodiv = new twrDiv(eiodiv, this.modParams, this);\n        this.iocanvas = new twrCanvas(eiocanvas, this.modParams, this);\n        this.d2dcanvas = new twrCanvas(ed2dcanvas, this.modParams, this);\n    }\n    divLog(...params) {\n        for (var i = 0; i < params.length; i++) {\n            this.iodiv.stringOut(params[i].toString());\n            this.iodiv.charOut(32); // space\n        }\n        this.iodiv.charOut(10);\n    }\n}\n//# sourceMappingURL=twrmodjsmain.js.map","// This class extends base to handle options when called in the main Java Script thread\r\n\r\nimport {twrDiv} from \"./twrdiv.js\"\r\nimport {IModParams, IModOpts, twrWasmModuleBase} from \"./twrmodbase.js\"\r\nimport {twrCanvas} from \"./twrcanvas.js\"\r\n\r\n\r\nexport abstract class twrWasmModuleInJSMain extends twrWasmModuleBase {\r\n\tiocanvas:twrCanvas;\r\n\td2dcanvas:twrCanvas;\r\n\tiodiv:twrDiv;\r\n\tmodParams:IModParams;\r\n\r\n   constructor(opts:IModOpts={}, isWasmModule=false) {\r\n\t\tsuper(isWasmModule);\r\n\t\tif (typeof document === 'undefined')\r\n\t\t\tthrow new Error (\"twrWasmModuleJSMain should only be created in JavaScript Main.\");\r\n\r\n\t\tconst eiodiv=document.getElementById(\"twr_iodiv\") as HTMLDivElement;\r\n\t\tconst eiocanvas=document.getElementById(\"twr_iocanvas\") as HTMLCanvasElement;\r\n\t\tconst ed2dcanvas=document.getElementById(\"twr_d2dcanvas\") as HTMLCanvasElement;\r\n\r\n\t\tif (eiocanvas && ed2dcanvas) throw new Error (\"Both twr_iocanvas and twr_d2dcanvas defined. Currently only one canvas allowed.\");\r\n\t\tif (opts.stdio=='div' && !eiodiv) throw new Error(\"twrWasmModuleBase opts=='div' but twr_iodiv not defined\");\r\n\t\tif (opts.stdio=='canvas' && !eiocanvas) throw new Error(\"twrWasmModuleBase, opts=='canvas' but twr_iocanvas not defined\");\r\n\t\tif (opts.isd2dcanvas && !ed2dcanvas) throw new Error(\"twrWasmModuleBase, opts.isdrawcanvas==true but twr_d2dcanvas not defined\");\r\n\r\n\t\t// set default opts based on elements found\r\n\t\tif (eiodiv) opts={stdio:\"div\", ...opts};\r\n\t\telse if (eiocanvas) opts={stdio:\"canvas\",  ...opts};\r\n\t\telse opts={stdio:\"debug\", ...opts};\r\n\r\n\t\tif (!eiodiv && !eiocanvas) console.log(\"Since neither twr_iocanvas nor twr_iodiv is defined, stdout directed to debug console.\");\r\n\t\telse console.log('tiny-wasm-runtime: stdio set to: ', opts.stdio);\r\n\r\n\t\tif (eiocanvas) opts={windim:[64, 16], ...opts};\r\n\t\telse opts={windim:[0, 0], ...opts};\r\n\r\n\t\tif (!opts.imports) opts.imports={};\r\n\r\n\t\tlet styleIsDefault=false;\r\n\t\tif (!opts.backcolor) {styleIsDefault=true; opts.backcolor=\"black\";}\r\n\t\tif (!opts.forecolor) {styleIsDefault=true; opts.forecolor=\"white\";}\r\n\t\tif (!opts.fontsize) {styleIsDefault=true; opts.fontsize=16;}\r\n\r\n\t\tif (opts.isd2dcanvas===undefined) {\r\n\t\t\tif (ed2dcanvas) \r\n\t\t\t\topts.isd2dcanvas=true;\r\n\t\t\telse\r\n\t\t\t\topts.isd2dcanvas=false;\r\n\t\t}\r\n\r\n\t\tthis.modParams={\r\n\t\t\tstdio:opts.stdio!, \r\n\t\t\twindim:opts.windim!, \r\n\t\t\timports:opts.imports, \r\n\t\t\tforecolor:opts.forecolor, \r\n\t\t\tbackcolor:opts.backcolor, \r\n\t\t\tstyleIsDefault: styleIsDefault,\r\n\t\t\tfontsize:opts.fontsize,\r\n\t\t\tisd2dcanvas:opts.isd2dcanvas\r\n\t\t};\r\n\r\n\t\tthis.iodiv=new twrDiv(eiodiv, this.modParams, this);\r\n\t\tthis.iocanvas=new twrCanvas(eiocanvas, this.modParams, this);\r\n\t\tthis.d2dcanvas=new twrCanvas(ed2dcanvas, this.modParams, this);\r\n\r\n\t}\r\n\r\n\tdivLog(...params: string[]) {\r\n\t\tfor (var i = 0; i < params.length; i++) {\r\n\t\t\tthis.iodiv.stringOut(params[i].toString());\r\n\t\t\tthis.iodiv.charOut(32); // space\r\n\t\t}\r\n\t\tthis.iodiv.charOut(10);\r\n\t  }\r\n}","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nexport class twrDiv {\n    div;\n    divKeys;\n    CURSOR = String.fromCharCode(9611); // ▋ see https://daniel-hug.github.io/characters/#k_70\n    cursorOn = false;\n    lastChar = 0;\n    extraBR = false;\n    owner;\n    constructor(element, modParams, modbase) {\n        this.div = element;\n        this.owner = modbase;\n        if (!this.owner.isWasmModule) { // twrWasmModule doesn't use shared memory\n            this.divKeys = new twrSharedCircularBuffer(); // tsconfig, lib must be set to 2017 or higher\n        }\n        if (this.div && !modParams.styleIsDefault) { // don't let default colors override divStyle\n            this.div.style.backgroundColor = modParams.backcolor;\n            this.div.style.color = modParams.forecolor;\n            this.div.style.font = modParams.fontsize.toString() + \"px arial\";\n        }\n    }\n    isValid() {\n        return !!this.div;\n    }\n    getProxyParams() {\n        if (!this.divKeys)\n            throw new Error(\"internal error in getProxyParams.\");\n        return [this.divKeys.sharedArray];\n    }\n    /*\n     * add character to div.  Supports the following control codes:\n     * any of CRLF, CR (/r), or LF(/n)  will cause a new line\n     * 0xE cursor on\n     * 0x8 backspace\n     * 0xF cursor off\n    */\n    charOut(ch) {\n        if (!this.div)\n            return;\n        //console.log(\"div::charout: \", ch);\n        if (this.extraBR) {\n            this.extraBR = false;\n            if (this.cursorOn)\n                this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n            this.div.innerHTML = this.div.innerHTML.slice(0, -4);\n            if (this.cursorOn)\n                this.div.innerHTML += this.CURSOR;\n        }\n        switch (ch) {\n            case 10: // newline\n            case 13: // return\n                if (ch == 10 && this.lastChar == 13)\n                    break; // detect CR LF and treat as single new line\n                if (this.cursorOn)\n                    this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML += \"<br><br>\"; //2nd break is a place holder for next line (fixes scroll issue at bottom)\n                this.extraBR = true;\n                if (this.cursorOn)\n                    this.div.innerHTML += this.CURSOR;\n                //element.scrollIntoView();\n                //element.scrollTop = element.scrollHeight;\n                let p = this.div.getBoundingClientRect();\n                window.scrollTo(0, p.height + 100);\n                break;\n            case 8: // backspace\n                if (this.cursorOn)\n                    this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                if (this.cursorOn)\n                    this.div.innerHTML += this.CURSOR;\n                break;\n            case 0xE: // cursor on\n                if (!this.cursorOn) {\n                    this.cursorOn = true;\n                    this.div.innerHTML += this.CURSOR;\n                    this.div.focus();\n                }\n                break;\n            case 0xF: // cursor off\n                if (this.cursorOn) {\n                    this.cursorOn = false;\n                    this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                }\n                break;\n            default:\n                if (this.cursorOn)\n                    this.div.innerHTML = this.div.innerHTML.slice(0, -1);\n                this.div.innerHTML += String.fromCharCode(ch);\n                if (this.cursorOn)\n                    this.div.innerHTML += this.CURSOR;\n                break;\n        }\n        this.lastChar = ch;\n    }\n    stringOut(str) {\n        for (let i = 0; i < str.length; i++)\n            this.charOut(str.charCodeAt(i));\n    }\n}\nexport class twrDivProxy {\n    divKeys;\n    constructor(params) {\n        const [divKeysBuffer] = params;\n        this.divKeys = new twrSharedCircularBuffer(divKeysBuffer);\n    }\n    charIn() {\n        return this.divKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.divKeys.isEmpty())\n            return 0;\n        else\n            return this.charIn();\n    }\n    charOut(ch) {\n        postMessage([\"divout\", ch]);\n    }\n}\n//# sourceMappingURL=twrdiv.js.map","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\r\nimport { IModParams } from \"./twrmodbase.js\";\r\nimport {twrWasmModuleBase} from \"./twrmodbase.js\";\r\n\r\nexport type TDivProxyParams = [SharedArrayBuffer];\r\n\r\nexport interface IDiv {\r\n    charOut: (ds:number)=>void,\r\n    charIn?: ()=>number,\r\n    inkey?: ()=>number,\r\n    getProxyParams?: ()=>TDivProxyParams,\r\n }\r\n\r\n\r\nexport class twrDiv implements IDiv {\r\n\tdiv:HTMLDivElement|null|undefined;\r\n\tdivKeys?:twrSharedCircularBuffer;\r\n\tCURSOR=String.fromCharCode(9611);  // ▋ see https://daniel-hug.github.io/characters/#k_70\r\n\tcursorOn:boolean=false;\r\n\tlastChar:number=0;\r\n\textraBR:boolean=false;\r\n\towner:twrWasmModuleBase;\r\n\r\n    constructor(element:HTMLDivElement|null|undefined,  modParams:IModParams, modbase:twrWasmModuleBase) {\r\n\t\tthis.div=element;\r\n\t\tthis.owner=modbase;\r\n        if (!this.owner.isWasmModule) {   // twrWasmModule doesn't use shared memory\r\n\t\t\tthis.divKeys = new twrSharedCircularBuffer();  // tsconfig, lib must be set to 2017 or higher\r\n\t\t}\r\n\r\n\t\tif (this.div && !modParams.styleIsDefault) {  // don't let default colors override divStyle\r\n\t\t\tthis.div.style.backgroundColor = modParams.backcolor;\r\n\t\t\tthis.div.style.color = modParams.forecolor;\r\n\t\t\tthis.div.style.font=modParams.fontsize.toString()+\"px arial\"\r\n\t\t}\r\n   }\r\n\r\n\tisValid() {\r\n\t\treturn !!this.div;\r\n\t}\r\n\r\n    getProxyParams() : TDivProxyParams {\r\n        if (!this.divKeys) throw new Error(\"internal error in getProxyParams.\");\r\n        return [ this.divKeys.sharedArray];\r\n    }\r\n\r\n\r\n/* \r\n * add character to div.  Supports the following control codes:\r\n * any of CRLF, CR (/r), or LF(/n)  will cause a new line\r\n * 0xE cursor on \r\n * 0x8 backspace\r\n * 0xF cursor off \r\n*/\r\n\tcharOut(ch:number) {\r\n\r\n\t\tif (!this.div) return;\r\n\r\n\t\t//console.log(\"div::charout: \", ch);\r\n\r\n\t\tif (this.extraBR) {\r\n\t\t\tthis.extraBR=false;\r\n\t\t\tif (this.cursorOn) this.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\tthis.div.innerHTML=this.div.innerHTML.slice(0, -4);\r\n\t\t\tif (this.cursorOn) this.div.innerHTML +=  this.CURSOR;\r\n\t\t}\r\n\r\n\t\tswitch (ch) {\r\n\t\t\tcase 10:  // newline\r\n\t\t\tcase 13:  // return\r\n\t\t\t\tif (ch==10 && this.lastChar==13) break;  // detect CR LF and treat as single new line\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\t\tthis.div.innerHTML +=  \"<br><br>\";   //2nd break is a place holder for next line (fixes scroll issue at bottom)\r\n\t\t\t\tthis.extraBR=true;\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML +=  this.CURSOR;\r\n\t\t\t\t//element.scrollIntoView();\r\n\t\t\t\t//element.scrollTop = element.scrollHeight;\r\n\t\t\t\tlet p = this.div.getBoundingClientRect();\r\n\t\t\t\twindow.scrollTo(0, p.height+100);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 8:  // backspace\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\t\tthis.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML +=  this.CURSOR;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 0xE:   // cursor on\r\n\t\t\t\tif (!this.cursorOn) {\r\n\t\t\t\t\tthis.cursorOn=true;\r\n\t\t\t\t\tthis.div.innerHTML +=  this.CURSOR;\r\n\t\t\t\t\tthis.div.focus();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 0xF:   // cursor off\r\n\t\t\t\tif (this.cursorOn) {\r\n\t\t\t\t\tthis.cursorOn=false;\r\n\t\t\t\t\tthis.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML=this.div.innerHTML.slice(0, -1);\r\n\t\t\t\tthis.div.innerHTML +=  String.fromCharCode(ch);\r\n\t\t\t\tif (this.cursorOn) this.div.innerHTML +=  this.CURSOR;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\tthis.lastChar=ch;\r\n\t}\r\n\r\n\tstringOut(str:string) {\r\n\t\tfor (let i=0; i < str.length; i++)\r\n\t\t\tthis.charOut(str.charCodeAt(i));\r\n\t}\r\n}\r\n\r\n\r\nexport class twrDivProxy implements IDiv {\r\n    divKeys: twrSharedCircularBuffer;\r\n\r\n    constructor(params:TDivProxyParams) {\r\n        const [divKeysBuffer] = params;\r\n        this.divKeys = new twrSharedCircularBuffer(divKeysBuffer);\r\n    }\r\n\r\n    charIn() {  \r\n        return this.divKeys.readWait();  // wait for a key, then read it\r\n    }\r\n    \r\n    inkey() {\r\n        if (this.divKeys.isEmpty())\r\n            return 0;\r\n        else\r\n            return this.charIn();    \r\n    }\r\n\r\n\tcharOut(ch:number) {\r\n\t\tpostMessage([\"divout\", ch]);\r\n\t}\r\n}\r\n\r\n","//\n// This class implements a circular buffer that the main javascript thread can write to, \n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\n// readWait() is used used when io_getc() or io_getstr() is called from a C function.\n//\nconst RDIDX = 256;\nconst WRIDX = 257;\nconst LEN = 256;\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\n// the first 256 array entries are the circular buffer\n// the next two are used for the read and write index\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\nexport class twrSharedCircularBuffer {\n    sharedArray;\n    buf;\n    constructor(sa) {\n        if (typeof window !== 'undefined') { // this check only works if window defined (not a worker thread)\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:'))\n                throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa)\n            this.sharedArray = sa;\n        else\n            this.sharedArray = new SharedArrayBuffer(258 * 4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[RDIDX] = 0;\n        this.buf[WRIDX] = 0;\n    }\n    write(n) {\n        let i = this.buf[WRIDX];\n        this.buf[i] = n;\n        i++;\n        if (i == LEN)\n            i = 0;\n        this.buf[WRIDX] = i;\n        Atomics.notify(this.buf, WRIDX);\n    }\n    read() {\n        if (!this.isEmpty()) {\n            let i = this.buf[RDIDX];\n            let n = this.buf[i];\n            i++;\n            this.buf[RDIDX] = i;\n            return n;\n        }\n        else\n            return -1;\n    }\n    readWait() {\n        if (this.isEmpty()) {\n            const rdptr = this.buf[RDIDX];\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\n            Atomics.wait(this.buf, WRIDX, rdptr);\n        }\n        return this.read();\n    }\n    isEmpty() {\n        return this.buf[RDIDX] == this.buf[WRIDX];\n    }\n}\n//# sourceMappingURL=twrcircular.js.map","//\r\n// This class implements a circular buffer that the main javascript thread can write to, \r\n// and a blocking WebWorker thread can read from.  This allows keyboard characters to be transferred from the main JS thread to a WebWorker thread.\r\n// The WebWorker can use the readWait() function to sleep, w/o participating in the normal \r\n// async callback dispatch method.  This allows a C program that is a single blocking loop to receive input from the primary javascript thread.\r\n// readWait() is used used when io_getc() or io_getstr() is called from a C function.\r\n//\r\n\r\nconst RDIDX=256;\r\nconst WRIDX=257;\r\nconst LEN=256;\r\n\r\n// A single thread can read and a separate single thread can write.  With these constraints Atomic operations are not needed.\r\n// the first 256 array entries are the circular buffer\r\n// the next two are used for the read and write index\r\n\r\n//!!!! I am using --enable-features=SharedArrayBuffer; see the SharedArrayBuffer docs for COR issues when going to a live web server\r\n\r\nexport class twrSharedCircularBuffer {\r\n\tsharedArray:SharedArrayBuffer;\r\n\tbuf:Int32Array;\r\n \r\n\tconstructor (sa?:SharedArrayBuffer) {\r\n        if (typeof window !== 'undefined') {  // this check only works if window defined (not a worker thread)\r\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) throw new Error(\"twrSharedCircularBuffer constructor, crossOriginIsolated=\"+crossOriginIsolated+\". See SharedArrayBuffer docs.\");\r\n        }\r\n        if (sa) this.sharedArray=sa;\r\n        else this.sharedArray=new SharedArrayBuffer(258*4);\r\n\t\tthis.buf=new Int32Array(this.sharedArray);\r\n        this.buf[RDIDX]=0;\r\n        this.buf[WRIDX]=0;\r\n\t}\r\n\r\n\twrite(n:number) {\r\n        let i=this.buf[WRIDX];\r\n        this.buf[i]=n;\r\n        i++;\r\n        if (i==LEN) i=0;\r\n        this.buf[WRIDX]=i;  \r\n        Atomics.notify(this.buf, WRIDX);   \r\n\t}\r\n\r\n\tread():number {\r\n        if (!this.isEmpty()) {\r\n            let i=this.buf[RDIDX];\r\n            let n=this.buf[i];\r\n            i++;\r\n            this.buf[RDIDX]=i;\r\n            return n;\r\n        }\r\n\t\telse\r\n            return -1;\r\n\t}\r\n\r\n    readWait():number {\r\n        if (this.isEmpty()) {\r\n            const rdptr=this.buf[RDIDX];\r\n            // verifies that a shared memory location still contains a given value and if so sleeps until notified.\r\n            Atomics.wait(this.buf, WRIDX, rdptr);\r\n        }\r\n        return this.read();\r\n\t}\r\n\r\n    isEmpty():boolean {\r\n        return this.buf[RDIDX]==this.buf[WRIDX];\r\n    }\r\n}\r\n","import { twrFloatUtil } from \"./twrfloat.js\";\n/*********************************************************************/\n/*********************************************************************/\n/*********************************************************************/\nexport class twrWasmModuleBase {\n    memory;\n    mem8;\n    mem32;\n    memD;\n    exports;\n    isWorker = false;\n    isWasmModule; // twrWasmModule?  (eg. could be twrWasmModuleAsync, twrWasmModuleInWorker, twrWasmModuleInJSMain)\n    floatUtil;\n    constructor(isWasmModule = false) {\n        this.isWasmModule = isWasmModule; // as opposed to twrWasmModuleAsync, twrWasmModuleInWorker\n        this.mem8 = new Uint8Array(); // avoid type errors\n        this.mem32 = new Uint32Array(); // avoid type errors\n        this.memD = new Float64Array(); // avoid type errors\n        this.floatUtil = new twrFloatUtil(this);\n        //console.log(\"size of mem8 after constructor\",this.mem8.length);\n    }\n    /*********************************************************************/\n    /*********************************************************************/\n    async loadWasm(pathToLoad) {\n        //console.log(\"fileToLoad\",fileToLoad)\n        let response;\n        try {\n            response = await fetch(pathToLoad);\n        }\n        catch (err) {\n            console.log('loadWasm() failed to fetch: ' + pathToLoad);\n            throw err;\n        }\n        if (!response.ok)\n            throw new Error(\"fetch response error on file '\" + pathToLoad + \"'\\n\" + response.statusText);\n        try {\n            let wasmBytes = await response.arrayBuffer();\n            let allimports = {\n                ...this.modParams.imports\n            };\n            let instance = await WebAssembly.instantiate(wasmBytes, { env: allimports });\n            this.exports = instance.instance.exports;\n            if (!this.exports)\n                throw new Error(\"Unexpected error - undefined instance.exports\");\n            if (this.memory)\n                throw new Error(\"unexpected error -- this.memory already set\");\n            this.memory = this.exports.memory;\n            if (!this.memory)\n                throw new Error(\"Unexpected error - undefined exports.memory\");\n            this.mem8 = new Uint8Array(this.memory.buffer);\n            this.mem32 = new Uint32Array(this.memory.buffer);\n            this.memD = new Float64Array(this.memory.buffer);\n            // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n            if (this.isWorker) {\n                if (this.memory.buffer instanceof ArrayBuffer)\n                    console.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\n                postMessage([\"setmemory\", this.memory]);\n            }\n            if (this.isWasmModule) {\n                // here if twrWasmModule, twrWasmModuleAsync overrides this function\n                // instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\n                if (!(this.memory.buffer instanceof ArrayBuffer))\n                    console.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\n            }\n            this.malloc = (size) => {\n                return new Promise(resolve => {\n                    const m = this.exports.twr_malloc;\n                    resolve(m(size));\n                });\n            };\n            this.init();\n        }\n        catch (err) {\n            console.log('WASM instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\n            throw err;\n        }\n    }\n    init() {\n        //console.log(\"loadWasm.init() enter\")\n        let p;\n        switch (this.modParams.stdio) {\n            case \"debug\":\n                p = 0;\n                break;\n            case \"div\":\n                p = 1;\n                break;\n            case \"canvas\":\n                p = 2;\n                break;\n            case \"null\":\n                p = 3;\n                break;\n            default:\n                p = 0; // debug\n        }\n        const twrInit = this.exports.twr_wasm_init;\n        //console.log(\"twrInit:\",twrInit)\n        twrInit(p, this.mem8.length);\n    }\n    /* executeC takes an array where:\n    * the first entry is the name of the C function in the wasm module to call (must be exported, typically via the --export clang flag)\n    * and the next entries are a variable number of parameters to pass to the C function, of type\n    * number - converted to int32 or float64 as appropriate\n    * string - converted to a an index (ptr) into a module Memory returned via stringToMem()\n    * URL - the file contents are loaded into module Memory via urlToMem(), and two C parameters are generated - index (pointer) to the memory, and length\n    * Uint8Array - the array is loaded into module memory via uint8ArrayToMem(), and two parameters are generated - index (pointer) to the memory, and length\n    */\n    async executeC(params) {\n        const cparams = await this.preCallC(params);\n        let retval = this.executeCImpl(params[0], cparams);\n        this.postCallC(cparams, params);\n        return retval;\n    }\n    async executeCImpl(fname, cparams = []) {\n        if (!this.exports)\n            throw new Error(\"this.exports undefined\");\n        if (!this.exports[fname])\n            throw new Error(\"executeC: function '\" + fname + \"' not in export table.  Use --export wasm-ld flag.\");\n        const f = this.exports[fname];\n        let cr = f(...cparams);\n        return cr;\n    }\n    // convert an array of parameters to numbers by stuffing contents into malloc'd wasm memory\n    async preCallC(params) {\n        if (!(params.constructor === Array))\n            throw new Error(\"executeC: params must be array, first arg is function name\");\n        if (params.length == 0)\n            throw new Error(\"executeC: missing function name\");\n        let cparams = [];\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                    cparams[ci++] = p;\n                    break;\n                case 'string':\n                    cparams[ci++] = await this.putString(p);\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        const r = await this.fetchAndPutURL(p);\n                        cparams[ci++] = r[0]; // mem index\n                        cparams[ci++] = r[1]; // len\n                        break;\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        const r = await this.putArrayBuffer(p);\n                        cparams[ci++] = r; // mem index\n                        break;\n                    }\n                default:\n                    throw new Error(\"executeC: invalid object type passed in\");\n            }\n        }\n        return cparams;\n    }\n    // free the mallocs; copy array buffer data from malloc back to arraybuffer\n    async postCallC(cparams, params) {\n        let ci = 0;\n        for (let i = 1; i < params.length; i++) {\n            const p = params[i];\n            switch (typeof p) {\n                case 'number':\n                    ci++;\n                    break;\n                case 'string':\n                    this.executeCImpl('twr_free', [cparams[ci]]);\n                    ci++;\n                    break;\n                case 'object':\n                    if (p instanceof URL) {\n                        this.executeCImpl('twr_free', [cparams[ci]]);\n                        ci = ci + 2;\n                        break;\n                    }\n                    else if (p instanceof ArrayBuffer) {\n                        let u8 = new Uint8Array(p);\n                        for (let j = 0; j < u8.length; j++)\n                            u8[j] = this.mem8[cparams[ci] + j]; // mod.mem8 is a Uint8Array view of the module's Web Assembly Memory\n                        this.executeCImpl('twr_free', [cparams[ci]]);\n                        ci++;\n                        break;\n                    }\n                    else\n                        throw new Error(\"postCallC: internal error A\");\n                default:\n                    throw new Error(\"postCallC: internal error B\");\n            }\n        }\n        return cparams;\n    }\n    /*********************************************************************/\n    /*********************************************************************/\n    // copy a string into existing buffer in the webassembly module memory\n    copyString(buffer, buffer_size, sin) {\n        let i;\n        for (i = 0; i < sin.length && i < buffer_size - 1; i++)\n            this.mem8[buffer + i] = sin.charCodeAt(i);\n        this.mem8[buffer + i] = 0;\n    }\n    // allocate and copy a string into the webassembly module memory\n    async putString(sin) {\n        let strIndex = await this.malloc(sin.length);\n        this.copyString(strIndex, sin.length, sin);\n        return strIndex;\n    }\n    async putU8(u8a) {\n        let dest = await this.malloc(u8a.length);\n        for (let i = 0; i < u8a.length; i++)\n            this.mem8[dest + i] = u8a[i];\n        return dest;\n    }\n    async putArrayBuffer(ab) {\n        const u8 = new Uint8Array(ab);\n        return this.putU8(u8);\n    }\n    // given a url, load its contents, and stuff into wasm memory similar to Unint8Array\n    async fetchAndPutURL(fnin) {\n        if (!(typeof fnin === 'object' && fnin instanceof URL))\n            throw new Error(\"fetchAndPutURL param must be URL\");\n        try {\n            let response = await fetch(fnin);\n            let buffer = await response.arrayBuffer();\n            let src = new Uint8Array(buffer);\n            let dest = await this.putU8(src);\n            return [dest, src.length];\n        }\n        catch (err) {\n            console.log('fetchAndPutURL Error. URL: ' + fnin + '\\n' + err + (err.stack ? \"\\n\" + err.stack : ''));\n            throw err;\n        }\n    }\n    getLong(idx) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"getLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length)\n            throw new Error(\"invalid index passed to getLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        const long = this.mem32[idx32];\n        return long;\n    }\n    setLong(idx, value) {\n        const idx32 = Math.floor(idx / 4);\n        if (idx32 * 4 != idx)\n            throw new Error(\"setLong passed non long aligned address\");\n        if (idx32 < 0 || idx32 >= this.mem32.length)\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\n        this.mem32[idx32] = value;\n    }\n    getDouble(idx) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"getLong passed non Float64 aligned address\");\n        const long = this.memD[idx64];\n        return long;\n    }\n    setDouble(idx, value) {\n        const idx64 = Math.floor(idx / 8);\n        if (idx64 * 8 != idx)\n            throw new Error(\"setDouble passed non Float64 aligned address\");\n        this.memD[idx64] = value;\n    }\n    getShort(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getShort: \" + idx);\n        const short = this.mem8[idx] + this.mem8[idx + 1] * 256;\n        return short;\n    }\n    // get a string out of module memory\n    // null terminated, up until max of (optional) len\n    getString(strIndex, len) {\n        let sout = \"\";\n        let i = 0;\n        while (this.mem8[strIndex + i] && (len === undefined ? true : i < len) && (strIndex + i) < this.mem8.length) {\n            sout = sout + String.fromCharCode(this.mem8[strIndex + i]);\n            i++;\n        }\n        return sout;\n    }\n    // get a byte array out of module memory when passed in index to [size, dataptr]\n    getU8Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU8: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU8\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU8\");\n        const u8 = this.mem8.slice(dataptr, dataptr + size);\n        return u8;\n    }\n    // get a int32 array out of module memory when passed in index to [size, dataptr]\n    getU32Arr(idx) {\n        if (idx < 0 || idx >= this.mem8.length)\n            throw new Error(\"invalid index passed to getU32: \" + idx);\n        const rv = new Uint32Array((this.mem8.slice(idx, idx + 8)).buffer);\n        let size = rv[0];\n        let dataptr = rv[1];\n        if (dataptr < 0 || dataptr >= (this.mem8.length))\n            throw new Error(\"invalid idx.dataptr passed to getU32\");\n        if (size < 0 || size > (this.mem8.length - dataptr))\n            throw new Error(\"invalid idx.size passed to  getU32\");\n        if (size % 4 != 0)\n            throw new Error(\"idx.size is not an integer number of 32 bit words\");\n        const u32 = new Uint32Array((this.mem8.slice(dataptr, dataptr + size)).buffer);\n        return u32;\n    }\n}\n//# sourceMappingURL=twrmodbase.js.map","\r\nimport {TCanvasProxyParams} from \"./twrcanvas.js\"\r\nimport {TDivProxyParams} from \"./twrdiv.js\";\r\nimport {TWaitingCallsProxyParams} from \"./twrwaitingcalls.js\"\r\nimport {twrDebugLogImpl} from \"./twrdebug.js\";\r\nimport {twrFloatUtil} from \"./twrfloat.js\";\r\n\r\n\r\nexport type TStdioVals=\"div\"|\"canvas\"|\"null\"|\"debug\";\r\n\r\nexport interface IModOpts {\r\n\tstdio?:TStdioVals, \r\n\twindim?:[number, number],\r\n\tforecolor?:string,\r\n\tbackcolor?:string,\r\n\tfontsize?:number,\r\n\tisd2dcanvas?:boolean,\r\n\timports?:{},\r\n}\r\n\r\nexport interface IModParams {\r\n\tstdio:TStdioVals, \r\n\twindim:[number, number],\r\n\tforecolor:string,\r\n\tbackcolor:string,\r\n\tfontsize:number,\r\n\tstyleIsDefault: boolean\r\n\tisd2dcanvas:boolean,\r\n\timports:{[index:string]:Function},\r\n}\r\n\r\nexport interface IModInWorkerParams {\r\n\tdivProxyParams:TDivProxyParams,\r\n\tcanvasProxyParams:TCanvasProxyParams,\r\n\twaitingCallsProxyParams:TWaitingCallsProxyParams,\r\n}\r\n\r\n/*********************************************************************/\r\n/*********************************************************************/\r\n/*********************************************************************/\r\n\r\nexport abstract class twrWasmModuleBase {\r\n\tmemory?:WebAssembly.Memory;\r\n\tmem8:Uint8Array;\r\n\tmem32:Uint32Array;\r\n\tmemD:Float64Array;\r\n\tabstract malloc:(size:number)=>Promise<number>;\r\n\tabstract modParams:IModParams;\r\n\texports?:WebAssembly.Exports;\r\n\tisWorker=false;\r\n\tisWasmModule:boolean;  // twrWasmModule?  (eg. could be twrWasmModuleAsync, twrWasmModuleInWorker, twrWasmModuleInJSMain)\r\n\tfloatUtil:twrFloatUtil;\r\n\r\n\tconstructor(isWasmModule=false) {\r\n\t\tthis.isWasmModule=isWasmModule;  // as opposed to twrWasmModuleAsync, twrWasmModuleInWorker\r\n\t\tthis.mem8=new Uint8Array();  \t// avoid type errors\r\n\t\tthis.mem32=new Uint32Array();  // avoid type errors\r\n\t\tthis.memD=new Float64Array();  // avoid type errors\r\n\t\tthis.floatUtil=new twrFloatUtil(this);\r\n\t\t//console.log(\"size of mem8 after constructor\",this.mem8.length);\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*********************************************************************/\r\n\r\n\tasync loadWasm(pathToLoad:string) {\r\n\t\t//console.log(\"fileToLoad\",fileToLoad)\r\n\r\n\t\tlet response;\r\n\t\ttry {\r\n\t\t\tresponse=await fetch(pathToLoad);\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('loadWasm() failed to fetch: '+pathToLoad);\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t\t\r\n\t\tif (!response.ok) throw new Error(\"fetch response error on file '\"+pathToLoad+\"'\\n\"+response.statusText);\r\n\r\n\t\ttry {\r\n\t\t\tlet wasmBytes = await response.arrayBuffer();\r\n\r\n\t\t\tlet allimports:WebAssembly.ModuleImports = { \r\n\t\t\t\t...this.modParams.imports\r\n\t\t\t};\r\n\r\n\t\t\tlet instance = await WebAssembly.instantiate(wasmBytes, {env: allimports});\r\n\r\n\t\t\tthis.exports=instance.instance.exports;\r\n\t\t\tif (!this.exports) throw new Error(\"Unexpected error - undefined instance.exports\");\r\n\r\n\t\t\tif (this.memory) throw new Error (\"unexpected error -- this.memory already set\");\r\n\t\t\tthis.memory=this.exports.memory as WebAssembly.Memory;\r\n\t\t\tif (!this.memory) throw new Error(\"Unexpected error - undefined exports.memory\");\r\n\t\t\tthis.mem8 = new Uint8Array(this.memory.buffer);\r\n\t\t\tthis.mem32 = new Uint32Array(this.memory.buffer);\r\n\t\t\tthis.memD = new Float64Array(this.memory.buffer);\r\n\t\t\t// instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\r\n\t\t\tif (this.isWorker) {\r\n\t\t\t\tif (this.memory.buffer instanceof ArrayBuffer)\r\n\t\t\t\t\tconsole.log(\"twrWasmModuleAsync requires shared Memory. Add wasm-ld --shared-memory --no-check-features (see docs)\");\r\n\t\t\t\t\r\n\t\t\t\tpostMessage([\"setmemory\",this.memory]);\r\n\t\t\t}\r\n\t\t\tif (this.isWasmModule) {\r\n\t\t\t\t// here if twrWasmModule, twrWasmModuleAsync overrides this function\r\n\t\t\t\t// instanceof SharedArrayBuffer doesn't work when crossOriginIsolated not enable, and will cause a runtime error\r\n\t\t\t\tif (!(this.memory.buffer instanceof ArrayBuffer))\r\n\t\t\t\t\tconsole.log(\"twrWasmModule does not require shared Memory. Okay to remove wasm-ld --shared-memory --no-check-features\");\r\n\t\t\t}\r\n\r\n\t\t\tthis.malloc=(size:number)=>{\r\n\t\t\t\treturn new Promise(resolve => {\r\n\t\t\t\t\tconst m=this.exports!.twr_malloc as (size:number)=>number;\r\n\t\t\t\t\tresolve(m(size));\r\n\t\t\t\t});\r\n\t\t   };\r\n\r\n\t\t\tthis.init();\r\n\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('WASM instantiate error: ' + err + (err.stack ? \"\\n\" + err.stack : ''));\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate init() {\r\n\t\t//console.log(\"loadWasm.init() enter\")\r\n\t\t\tlet p:number;\r\n\t\t\tswitch (this.modParams.stdio) {\r\n\t\t\t\tcase \"debug\":\r\n\t\t\t\t\tp=0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"div\":\r\n\t\t\t\t\tp=1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"canvas\":\r\n\t\t\t\t\tp=2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"null\":\r\n\t\t\t\t\tp=3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tp=0;  // debug\r\n\t\t\t}\r\n\r\n\t\t\tconst twrInit=this.exports!.twr_wasm_init as CallableFunction;\r\n\t\t\t//console.log(\"twrInit:\",twrInit)\r\n\t\t\ttwrInit(p, this.mem8.length);\r\n\t}\r\n\r\n\t/* executeC takes an array where:\r\n\t* the first entry is the name of the C function in the wasm module to call (must be exported, typically via the --export clang flag)\r\n\t* and the next entries are a variable number of parameters to pass to the C function, of type\r\n\t* number - converted to int32 or float64 as appropriate\r\n\t* string - converted to a an index (ptr) into a module Memory returned via stringToMem()\r\n\t* URL - the file contents are loaded into module Memory via urlToMem(), and two C parameters are generated - index (pointer) to the memory, and length\r\n\t* Uint8Array - the array is loaded into module memory via uint8ArrayToMem(), and two parameters are generated - index (pointer) to the memory, and length\r\n    */\r\n\r\n\tasync executeC(params:[string, ...(string|number|ArrayBuffer|URL)[]]) {\r\n\t\tconst cparams=await this.preCallC(params);\r\n\t\tlet retval = this.executeCImpl(params[0], cparams);\r\n\t\tthis.postCallC(cparams, params);\r\n\t\treturn retval;\r\n\t}\r\n\r\n\tasync executeCImpl(fname:string, cparams:number[]=[]) {\r\n\t\tif (!this.exports) throw new Error(\"this.exports undefined\");\r\n\t\tif (!this.exports[fname]) throw new Error(\"executeC: function '\"+fname+\"' not in export table.  Use --export wasm-ld flag.\");\r\n\r\n\t\tconst f = this.exports[fname] as CallableFunction;\r\n\t\tlet cr=f(...cparams);\r\n\r\n\t\treturn cr;\r\n\t}\r\n\r\n\t// convert an array of parameters to numbers by stuffing contents into malloc'd wasm memory\r\n\tasync preCallC(params:[string, ...(string|number|ArrayBuffer|URL)[]]) {\r\n\r\n\t\tif (!(params.constructor === Array)) throw new Error (\"executeC: params must be array, first arg is function name\");\r\n\t\tif (params.length==0) throw new Error(\"executeC: missing function name\");\r\n\r\n\t\tlet cparams:number[]=[];\r\n\t\tlet ci=0;\r\n\t\tfor (let i=1; i < params.length; i++) {\r\n\t\t\tconst p=params[i];\r\n\t\t\tswitch (typeof p) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tcparams[ci++]=p;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tcparams[ci++]=await this.putString(p);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tif (p instanceof URL) {\r\n\t\t\t\t\t\tconst r=await this.fetchAndPutURL(p);\r\n\t\t\t\t\t\tcparams[ci++]=r[0];  // mem index\r\n\t\t\t\t\t\tcparams[ci++]=r[1];   // len\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (p instanceof ArrayBuffer) {\r\n\t\t\t\t\t\tconst r=await this.putArrayBuffer(p);\r\n\t\t\t\t\t\tcparams[ci++]=r;  // mem index\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error (\"executeC: invalid object type passed in\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn cparams;\r\n\t}\r\n\r\n\t// free the mallocs; copy array buffer data from malloc back to arraybuffer\r\n\tasync postCallC(cparams:number[], params:[string, ...(string|number|ArrayBuffer|URL)[]]) {\r\n\r\n\t\tlet ci=0;\r\n\t\tfor (let i=1; i < params.length; i++) {\r\n\t\t\tconst p=params[i];\r\n\t\t\tswitch (typeof p) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tci++;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'string':\r\n\t\t\t\t\tthis.executeCImpl('twr_free',[cparams[ci]])\r\n\t\t\t\t\tci++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\tif (p instanceof URL) {\r\n\t\t\t\t\t\tthis.executeCImpl('twr_free',[cparams[ci]])\r\n\t\t\t\t\t\tci=ci+2;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (p instanceof ArrayBuffer) {\r\n\t\t\t\t\t\tlet u8=new Uint8Array(p);\r\n\t\t\t\t\t\tfor (let j=0; j<u8.length; j++)\r\n\t\t\t\t\t\t\tu8[j]=this.mem8[cparams[ci]+j];   // mod.mem8 is a Uint8Array view of the module's Web Assembly Memory\r\n\t\t\t\t\t\tthis.executeCImpl('twr_free',[cparams[ci]])\r\n\t\t\t\t\t\tci++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse \r\n\t\t\t\t\t\tthrow new Error (\"postCallC: internal error A\");\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error (\"postCallC: internal error B\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn cparams;\r\n\t}\r\n\r\n\t/*********************************************************************/\r\n\t/*********************************************************************/\r\n\r\n\t// copy a string into existing buffer in the webassembly module memory\r\n\tcopyString(buffer:number, buffer_size:number, sin:string):void {\r\n\t\tlet i;\r\n\t\tfor (i=0; i<sin.length && i<buffer_size-1; i++)\r\n\t\t\tthis.mem8[buffer+i]=sin.charCodeAt(i);\r\n\r\n\t\tthis.mem8[buffer+i]=0;\r\n\t}\r\n\r\n\t// allocate and copy a string into the webassembly module memory\r\n\tasync putString(sin:string) {\r\n\t\tlet strIndex:number=await this.malloc(sin.length);\r\n\t\tthis.copyString(strIndex, sin.length, sin);\r\n\t\treturn strIndex;\r\n\t}\r\n\r\n\tasync putU8(u8a:Uint8Array) {\r\n\t\tlet dest:number=await this.malloc(u8a.length); \r\n\t\tfor (let i=0; i<u8a.length; i++)\r\n\t\t\tthis.mem8[dest+i]=u8a[i];\r\n\r\n\t\treturn dest;\r\n\t}\r\n\r\n\tasync putArrayBuffer(ab:ArrayBuffer) {\r\n\t\tconst u8=new Uint8Array(ab);\r\n\t\treturn this.putU8(u8);\r\n\t}\r\n\r\n\t// given a url, load its contents, and stuff into wasm memory similar to Unint8Array\r\n\tasync fetchAndPutURL(fnin:URL) {\r\n\r\n\t\tif (!(typeof fnin === 'object' && fnin instanceof URL))\r\n\t\t\tthrow new Error(\"fetchAndPutURL param must be URL\");\r\n\r\n\t\ttry {\r\n\t\t\tlet response=await fetch(fnin);\r\n\t\t\tlet buffer = await response.arrayBuffer();\r\n\t\t\tlet src = new Uint8Array(buffer);\r\n\t\t\tlet dest=await this.putU8(src);\r\n\t\t\treturn [dest, src.length];\r\n\t\t\t\r\n\t\t} catch(err:any) {\r\n\t\t\tconsole.log('fetchAndPutURL Error. URL: '+fnin+'\\n' + err + (err.stack ? \"\\n\" + err.stack : ''));\r\n\t\t\tthrow err;\r\n\t\t}\r\n\t}\r\n\r\n\tgetLong(idx:number): number {\r\n\t\tconst idx32=Math.floor(idx/4);\r\n\t\tif (idx32*4!=idx) throw new Error(\"getLong passed non long aligned address\")\r\n\t\tif (idx32<0 || idx32 >= this.mem32.length) throw new Error(\"invalid index passed to getLong: \"+idx+\", this.mem32.length: \"+this.mem32.length);\r\n\t\tconst long:number = this.mem32[idx32];\r\n\t\treturn long;\r\n\t}\r\n\t\r\n\tsetLong(idx:number, value:number) {\r\n        const idx32 = Math.floor(idx / 4);\r\n        if (idx32 * 4 != idx)\r\n            throw new Error(\"setLong passed non long aligned address\");\r\n        if (idx32 < 0 || idx32 >= this.mem32.length)\r\n            throw new Error(\"invalid index passed to setLong: \" + idx + \", this.mem32.length: \" + this.mem32.length);\r\n        this.mem32[idx32]=value;\r\n    }\r\n\r\n\tgetDouble(idx:number): number {\r\n\t\tconst idx64=Math.floor(idx/8);\r\n\t\tif (idx64*8!=idx) throw new Error(\"getLong passed non Float64 aligned address\")\r\n\t\tconst long:number = this.memD[idx64];\r\n\t\treturn long;\r\n\t}\r\n\r\n\tsetDouble(idx:number, value:number) {\r\n\t\tconst idx64=Math.floor(idx/8);\r\n\t\tif (idx64*8!=idx) throw new Error(\"setDouble passed non Float64 aligned address\")\r\n\t\tthis.memD[idx64]=value;\r\n\t}\r\n\r\n\tgetShort(idx:number): number {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getShort: \"+idx);\r\n\t\tconst short:number = this.mem8[idx]+this.mem8[idx+1]*256;\r\n\t\treturn short;\r\n\t}\r\n\r\n\t// get a string out of module memory\r\n\t// null terminated, up until max of (optional) len\r\n\tgetString(strIndex:number, len?:number): string {\r\n\t\tlet sout=\"\";\r\n\r\n\t\tlet i=0;\r\n\t\twhile (this.mem8[strIndex+i] && (len===undefined?true:i<len) && (strIndex+i) < this.mem8.length) {\r\n\t\t\tsout=sout+String.fromCharCode(this.mem8[strIndex+i]);\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn sout;\r\n\t}\r\n\r\n\t// get a byte array out of module memory when passed in index to [size, dataptr]\r\n\tgetU8Arr(idx:number): Uint8Array {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU8: \"+idx);\r\n\r\n\t\tconst rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\r\n\t\tlet size:number=rv[0];\r\n\t\tlet dataptr:number=rv[1];\r\n\r\n\t\tif (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU8\")\r\n\t\tif (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU8\")\r\n\r\n\t\tconst u8=this.mem8.slice(dataptr, dataptr+size);\r\n\t\treturn u8;\r\n\t}\r\n\r\n\t// get a int32 array out of module memory when passed in index to [size, dataptr]\r\n\tgetU32Arr(idx:number): Uint32Array {\r\n\t\tif (idx<0 || idx>= this.mem8.length) throw new Error(\"invalid index passed to getU32: \"+idx);\r\n\r\n\t\tconst rv = new Uint32Array( (this.mem8.slice(idx, idx+8)).buffer );\r\n\t\tlet size:number=rv[0];\r\n\t\tlet dataptr:number=rv[1];\r\n\r\n\t\tif (dataptr <0 || dataptr >= (this.mem8.length)) throw new Error(\"invalid idx.dataptr passed to getU32\")\r\n\t\tif (size <0 || size > (this.mem8.length-dataptr)) throw new Error(\"invalid idx.size passed to  getU32\")\r\n\r\n\t\tif (size%4!=0) throw new Error(\"idx.size is not an integer number of 32 bit words\");\r\n\r\n\t\tconst u32 = new Uint32Array( (this.mem8.slice(dataptr, dataptr+size)).buffer );\r\n\t\treturn u32;\r\n\t}\r\n}\r\n","export class twrFloatUtil {\n    mod;\n    constructor(mod) {\n        this.mod = mod;\n    }\n    atod(strptr) {\n        const str = this.mod.getString(strptr);\n        const upper = str.trimStart().toUpperCase();\n        if (upper == \"INF\" || upper == \"+INF\")\n            return Number.POSITIVE_INFINITY;\n        else if (upper == \"-INF\")\n            return Number.NEGATIVE_INFINITY;\n        else {\n            // allow D for exponent -- old microsoft format they still support in fctv and I support in my awbasic\n            const r = Number.parseFloat(str.replaceAll('D', 'e').replaceAll('d', 'e'));\n            return r;\n        }\n    }\n    dtoa(buffer, buffer_size, value, max_precision) {\n        if (max_precision == -1) {\n            const r = value.toString();\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n        else {\n            let r = value.toString();\n            if (r.length > max_precision)\n                r = value.toPrecision(max_precision);\n            this.mod.copyString(buffer, buffer_size, r);\n        }\n    }\n    toFixed(buffer, buffer_size, value, decdigits) {\n        const r = value.toFixed(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    toExponential(buffer, buffer_size, value, decdigits) {\n        const r = value.toExponential(decdigits);\n        this.mod.copyString(buffer, buffer_size, r);\n    }\n    // emulates the C lib function -fcvt_s, but doesn't support all ranges of number.\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\n    // Negative exponents must be now smaller than 1e-99\n    // fully-function C version also int he source, but this is the version enabled by default\n    fcvtS(buffer, // char *\n    sizeInBytes, //size_t\n    value, // double\n    fracpart_numdigits, //int\n    dec, // int *\n    sign // int *\n    ) {\n        if (buffer == 0 || sign == 0 || dec == 0 || sizeInBytes < 1)\n            return 1;\n        let digits;\n        let decpos;\n        let s = 0; // default to positive\n        if (Number.isNaN(value)) { /* nan */\n            digits = \"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        }\n        else if (!Number.isFinite(value)) { /* infinity */\n            digits = \"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits + 1);\n            decpos = 1;\n        }\n        else if (value == 0) {\n            digits = \"000000000000000000000000000000000000\".slice(0, fracpart_numdigits);\n            decpos = 0;\n        }\n        else {\n            if (value < 0) {\n                s = 1; // negative\n                value = Math.abs(value);\n            }\n            if (fracpart_numdigits > 100 || value > 1e+21 || value < 1e-99) {\n                this.mod.copyString(buffer, sizeInBytes, \"\");\n                this.mod.mem32[dec] = 0;\n                return 1;\n            }\n            const roundValStr = value.toFixed(fracpart_numdigits);\n            let [intPart = \"\", fracPart = \"\"] = roundValStr.split('.');\n            if (intPart == \"0\")\n                intPart = \"\";\n            if (intPart.length > 0) { // has integer part\n                decpos = intPart.length;\n                digits = intPart + fracPart;\n            }\n            else { // only a fraction\n                digits = fracPart.replace(/^0+/, \"\"); // remove leading zeros\n                decpos = digits.length - fracPart.length;\n            }\n        }\n        if (sizeInBytes - 1 < digits.length)\n            return 1;\n        this.mod.copyString(buffer, sizeInBytes, digits);\n        this.mod.setLong(dec, decpos);\n        this.mod.setLong(sign, s);\n        return 0;\n        /*\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\n\n        let decpos=0;\n        let digits:string;\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\n    \n        if (decpos>0) { // has integer part\n            const intlen=Math.max(decpos, 0);\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\n            digits=nonExponent.replace('.', '');\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\n        }\n        else { // only a fraction\n            const intpart=Math.trunc(value);\n            const fracpart=value-intpart;\n            const prec=fracpart_numdigits- (-decpos);\n            console.log(\"prec=\",prec);\n            if (prec<1) {\n                digits=\"\";\n            }\n            else {\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\n                digits=nonExponent.replace('.', '');\n                digits=digits.replace(/^0+/,\"\");\n            }\n        }\n\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\n        console.log('digits=',digits);\n        console.log('dec=',decpos);\n        console.log(\"sign=\",s);\n    */\n    }\n}\n//# sourceMappingURL=twrfloat.js.map","\r\nimport {twrWasmModuleBase} from \"./twrmodbase.js\"\r\n\r\nexport class twrFloatUtil {\r\n    mod: twrWasmModuleBase;\r\n\r\n    constructor(mod: twrWasmModuleBase) {\r\n        this.mod=mod;\r\n    }\r\n\r\n    atod(strptr:number):number {\r\n        const str=this.mod.getString(strptr);\r\n\r\n        const upper=str.trimStart().toUpperCase();\r\n        if (upper==\"INF\" || upper==\"+INF\")\r\n            return Number.POSITIVE_INFINITY;\r\n        else if (upper==\"-INF\")\r\n            return Number.NEGATIVE_INFINITY\r\n        else {\r\n            // allow D for exponent -- old microsoft format they still support in fctv and I support in my awbasic\r\n            const r=Number.parseFloat(str.replaceAll('D','e').replaceAll('d','e'));\r\n            return r;\r\n        }\r\n    }\r\n\r\n    dtoa(buffer:number, buffer_size:number, value:number, max_precision:number):void {\r\n        if (max_precision==-1) {\r\n            const r=value.toString();\r\n            this.mod.copyString(buffer, buffer_size, r);\r\n        }\r\n        else {\r\n            let r=value.toString();\r\n            if (r.length>max_precision)\r\n                r=value.toPrecision(max_precision);\r\n            this.mod.copyString(buffer, buffer_size, r);\r\n        }\r\n    }\r\n\r\n    toFixed(buffer:number, buffer_size:number, value:number, decdigits:number):void {\r\n        const r=value.toFixed(decdigits);\r\n        this.mod.copyString(buffer, buffer_size, r);\r\n    }\r\n\r\n    toExponential(buffer:number, buffer_size:number, value:number, decdigits:number):void {\r\n        const r=value.toExponential(decdigits);\r\n        this.mod.copyString(buffer, buffer_size, r);\r\n    }\r\n\r\n    // emulates the C lib function -fcvt_s, but doesn't support all ranges of number.\r\n    // Number.toFixed() has a max size of 100 fractional digits,  and values must be less than 1e+21\r\n    // Negative exponents must be now smaller than 1e-99\r\n    // fully-function C version also int he source, but this is the version enabled by default\r\n    fcvtS(\r\n        buffer:number,  // char *\r\n        sizeInBytes:number, //size_t\r\n        value:number,  // double\r\n        fracpart_numdigits:number,  //int\r\n        dec:number,  // int *\r\n        sign:number  // int *\r\n     ):number {\r\n\r\n        if (buffer==0 ||sign==0 || dec==0 || sizeInBytes<1) return 1;\r\n\r\n        let digits:string;\r\n        let decpos:number;\r\n        let s=0; // default to positive\r\n\r\n\r\n        if (Number.isNaN(value))  { /* nan */\r\n            digits=\"1#QNAN00000000000000000000000000000\".slice(0, fracpart_numdigits+1);\r\n            decpos=1;\r\n        }\r\n        else if (!Number.isFinite(value)) {    /* infinity */\r\n            digits=\"1#INF00000000000000000000000000000\".slice(0, fracpart_numdigits+1);\r\n            decpos=1;\r\n        }\r\n        else if (value==0) {  \r\n            digits=\"000000000000000000000000000000000000\".slice(0,fracpart_numdigits);\r\n            decpos=0;\r\n        }\r\n        \r\n        else {\r\n\r\n            if (value<0) {\r\n                s=1;  // negative\r\n                value=Math.abs(value);\r\n            }\r\n\r\n            if (fracpart_numdigits>100 || value > 1e+21 || value < 1e-99) {  \r\n                this.mod.copyString(buffer, sizeInBytes, \"\");\r\n                this.mod.mem32[dec]=0;\r\n                return 1;\r\n            }\r\n\r\n            const roundValStr=value.toFixed(fracpart_numdigits);\r\n            let [intPart=\"\", fracPart=\"\"] = roundValStr.split('.');\r\n            if (intPart==\"0\") intPart=\"\";\r\n\r\n            if (intPart.length>0) { // has integer part\r\n                decpos=intPart.length;\r\n                digits=intPart+fracPart;\r\n            }\r\n            else { // only a fraction\r\n                digits=fracPart.replace(/^0+/,\"\");  // remove leading zeros\r\n                decpos=digits.length-fracPart.length;\r\n            }\r\n        }\r\n\r\n        if (sizeInBytes-1 < digits.length) return 1; \r\n        this.mod.copyString(buffer, sizeInBytes, digits);\r\n        this.mod.setLong(dec, decpos);\r\n        this.mod.setLong(sign, s);\r\n\r\n        return 0;\r\n\r\n        /*\r\n        this version 'works' with larger numbers than using toFixed, but doesn't round correctly\r\n\r\n        let decpos=0;\r\n        let digits:string;\r\n        if (value!=0) decpos=Math.floor(Math.log10(value))+1;\r\n    \r\n        if (decpos>0) { // has integer part\r\n            const intlen=Math.max(decpos, 0);\r\n            console.log(\"intlen=\",intlen, \"decpos=\",decpos);\r\n            const [nonExponent, exponent=0] = value.toPrecision(intlen+fracpart_numdigits).split('e');\r\n            digits=nonExponent.replace('.', '');\r\n            digits=digits.replace(/^0+/,\"\");  // remove leading zeros\r\n        }\r\n        else { // only a fraction\r\n            const intpart=Math.trunc(value);\r\n            const fracpart=value-intpart;\r\n            const prec=fracpart_numdigits- (-decpos);\r\n            console.log(\"prec=\",prec);\r\n            if (prec<1) {\r\n                digits=\"\";\r\n            }\r\n            else {\r\n                const [nonExponent, exponent=0] = fracpart.toPrecision(prec).split('e');\r\n                digits=nonExponent.replace('.', '');\r\n                digits=digits.replace(/^0+/,\"\");\r\n            }\r\n        }\r\n\r\n        console.log(\"fcvtS value\",value,\"fracpart_numdigits\",fracpart_numdigits);\r\n        console.log('digits=',digits);\r\n        console.log('dec=',decpos);\r\n        console.log(\"sign=\",s);\r\n    */\r\n\r\n\r\n    }\r\n}","import { twrSharedCircularBuffer } from \"./twrcircular.js\";\nimport { twrSignal } from \"./twrsignal.js\";\nvar D2DType;\n(function (D2DType) {\n    D2DType[D2DType[\"D2D_FILLRECT\"] = 1] = \"D2D_FILLRECT\";\n    D2DType[D2DType[\"D2D_FILLCHAR\"] = 5] = \"D2D_FILLCHAR\";\n    D2DType[D2DType[\"D2D_SETLINEWIDTH\"] = 10] = \"D2D_SETLINEWIDTH\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLE\"] = 11] = \"D2D_SETFILLSTYLE\";\n    D2DType[D2DType[\"D2D_SETFONT\"] = 12] = \"D2D_SETFONT\";\n    D2DType[D2DType[\"D2D_BEGINPATH\"] = 13] = \"D2D_BEGINPATH\";\n    D2DType[D2DType[\"D2D_MOVETO\"] = 14] = \"D2D_MOVETO\";\n    D2DType[D2DType[\"D2D_LINETO\"] = 15] = \"D2D_LINETO\";\n    D2DType[D2DType[\"D2D_FILL\"] = 16] = \"D2D_FILL\";\n    D2DType[D2DType[\"D2D_STROKE\"] = 17] = \"D2D_STROKE\";\n    D2DType[D2DType[\"D2D_SETSTROKESTYLE\"] = 18] = \"D2D_SETSTROKESTYLE\";\n    D2DType[D2DType[\"D2D_ARC\"] = 19] = \"D2D_ARC\";\n    D2DType[D2DType[\"D2D_STROKERECT\"] = 20] = \"D2D_STROKERECT\";\n    D2DType[D2DType[\"D2D_FILLTEXT\"] = 21] = \"D2D_FILLTEXT\";\n    D2DType[D2DType[\"D2D_IMAGEDATA\"] = 22] = \"D2D_IMAGEDATA\";\n    D2DType[D2DType[\"D2D_PUTIMAGEDATA\"] = 23] = \"D2D_PUTIMAGEDATA\";\n    D2DType[D2DType[\"D2D_BEZIERTO\"] = 24] = \"D2D_BEZIERTO\";\n    D2DType[D2DType[\"D2D_MEASURETEXT\"] = 25] = \"D2D_MEASURETEXT\";\n    D2DType[D2DType[\"D2D_SAVE\"] = 26] = \"D2D_SAVE\";\n    D2DType[D2DType[\"D2D_RESTORE\"] = 27] = \"D2D_RESTORE\";\n    D2DType[D2DType[\"D2D_CREATERADIALGRADIENT\"] = 28] = \"D2D_CREATERADIALGRADIENT\";\n    D2DType[D2DType[\"D2D_SETCOLORSTOP\"] = 29] = \"D2D_SETCOLORSTOP\";\n    D2DType[D2DType[\"D2D_SETFILLSTYLEGRADIENT\"] = 30] = \"D2D_SETFILLSTYLEGRADIENT\";\n    D2DType[D2DType[\"D2D_RELEASEID\"] = 31] = \"D2D_RELEASEID\";\n})(D2DType || (D2DType = {}));\nexport class twrCanvas {\n    ctx;\n    props = { charWidth: 0, charHeight: 0, foreColor: 0, backColor: 0, widthInChars: 0, heightInChars: 0, canvasHeight: 0, canvasWidth: 0 };\n    owner;\n    cmdCompleteSignal;\n    canvasKeys;\n    precomputedObjects;\n    constructor(element, modParams, modbase) {\n        const { forecolor, backcolor, fontsize, isd2dcanvas: isd2dcanvas } = modParams;\n        this.owner = modbase;\n        this.props.widthInChars = modParams.windim[0];\n        this.props.heightInChars = modParams.windim[1];\n        if (!this.owner.isWasmModule) {\n            this.cmdCompleteSignal = new twrSignal();\n            this.canvasKeys = new twrSharedCircularBuffer(); // tsconfig, lib must be set to 2017 or higher\n        }\n        this.precomputedObjects = {};\n        if (element) {\n            if (!element.getContext)\n                throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\n            let c = element.getContext(\"2d\");\n            if (!c)\n                throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\n            c.font = fontsize.toString() + \"px Courier New\";\n            c.textBaseline = \"top\";\n            const sampleText = \"          \";\n            const tm = c.measureText(sampleText);\n            this.props.charWidth = Math.ceil(tm.width / sampleText.length); // ceil rounds up (eg .9 -> 1)\n            let fM = c.measureText(\"X\");\n            this.props.charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\n            if (!isd2dcanvas) {\n                element.width = this.props.charWidth * this.props.widthInChars;\n                element.height = this.props.charHeight * this.props.heightInChars;\n            }\n            this.props.canvasHeight = element.height;\n            this.props.canvasWidth = element.width;\n            //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\n            // reset after dims changed.  Not sure if ctx is needed to rest, but others do\n            let c2 = element.getContext(\"2d\");\n            if (!c2)\n                throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\n            this.ctx = c2;\n            this.ctx.font = fontsize.toString() + \"px Courier New\";\n            this.ctx.textBaseline = \"top\";\n            c2.fillStyle = backcolor;\n            this.props.backColor = Number(\"0x\" + c2.fillStyle.slice(1));\n            c2.fillStyle = forecolor;\n            this.props.foreColor = Number(\"0x\" + c2.fillStyle.slice(1));\n        }\n        //console.log(\"Create New twrCanvas: \",this.isValid(), element, this);\n        //console.log(\"twrCanvas.constructor props: \", this.props);\n    }\n    isValid() {\n        return !!this.ctx;\n    }\n    getProxyParams() {\n        if (!this.cmdCompleteSignal || !this.canvasKeys)\n            throw new Error(\"internal error in getProxyParams.\");\n        return [this.props, this.cmdCompleteSignal.sharedArray, this.canvasKeys.sharedArray];\n    }\n    getProp(pn) {\n        if (!this.isValid())\n            console.log(\"internal error - getProp called on invalid twrCanvas\");\n        const propName = this.owner.getString(pn);\n        //console.log(\"enter twrCanvas.getprop: \", pn, propName, this.props[propName], this.props);\n        return this.props[propName];\n    }\n    /* see draw2d.h for structs that match */\n    drawSeq(ds) {\n        //console.log(\"twr::Canvas enter drawSeq\");\n        if (!this.isValid())\n            console.log(\"internal error - drawSeq called on invalid twrCanvas\");\n        if (!this.ctx)\n            return;\n        let ins = this.owner.getLong(ds); /* ds->start */\n        const lastins = this.owner.getLong(ds + 4); /* ds->last */\n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\n        let next;\n        //let insCount=0;\n        while (1) {\n            //insCount++;\n            const type = this.owner.getLong(ins + 4); /* hdr->type */\n            if (0 /*type!=D2DType.D2D_FILLRECT*/) {\n                console.log(\"ins\", ins);\n                console.log(\"hdr.next\", this.owner.mem8[ins], this.owner.mem8[ins + 1], this.owner.mem8[ins + 2], this.owner.mem8[ins + 3]);\n                console.log(\"hdr.type\", this.owner.mem8[ins + 4], this.owner.mem8[ins + 5]);\n                console.log(\"next 4 bytes\", this.owner.mem8[ins + 6], this.owner.mem8[ins + 7], this.owner.mem8[ins + 8], this.owner.mem8[ins + 9]);\n                console.log(\"and 4 more \", this.owner.mem8[ins + 10], this.owner.mem8[ins + 11], this.owner.mem8[ins + 12], this.owner.mem8[ins + 13]);\n                //console.log(\"ins, type, next is \", ins.toString(16), type.toString(16), next.toString(16));\n            }\n            switch (type) {\n                case D2DType.D2D_FILLRECT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const w = this.owner.getDouble(ins + 24);\n                        const h = this.owner.getDouble(ins + 32);\n                        this.ctx.fillRect(x, y, w, h);\n                    }\n                    break;\n                case D2DType.D2D_STROKERECT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const w = this.owner.getDouble(ins + 24);\n                        const h = this.owner.getDouble(ins + 32);\n                        this.ctx.strokeRect(x, y, w, h);\n                    }\n                    break;\n                case D2DType.D2D_FILLCHAR:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const c = this.owner.getShort(ins + 24);\n                        let txt = String.fromCharCode(c);\n                        this.ctx.fillText(txt, x, y);\n                    }\n                    break;\n                case D2DType.D2D_FILLTEXT:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const str = this.owner.getString(this.owner.getLong(ins + 24));\n                        //console.log(\"filltext \",x,y,str)\n                        this.ctx.fillText(str, x, y);\n                    }\n                    break;\n                case D2DType.D2D_MEASURETEXT:\n                    {\n                        const str = this.owner.getString(this.owner.getLong(ins + 8));\n                        const tmidx = this.owner.getLong(ins + 12);\n                        const tm = this.ctx.measureText(str);\n                        this.owner.setDouble(tmidx + 0, tm.actualBoundingBoxAscent);\n                        this.owner.setDouble(tmidx + 8, tm.actualBoundingBoxDescent);\n                        this.owner.setDouble(tmidx + 16, tm.actualBoundingBoxLeft);\n                        this.owner.setDouble(tmidx + 24, tm.actualBoundingBoxRight);\n                        this.owner.setDouble(tmidx + 32, tm.fontBoundingBoxAscent);\n                        this.owner.setDouble(tmidx + 40, tm.fontBoundingBoxDescent);\n                        this.owner.setDouble(tmidx + 48, tm.width);\n                    }\n                    break;\n                case D2DType.D2D_SETFONT:\n                    {\n                        const str = this.owner.getString(this.owner.getLong(ins + 8));\n                        this.ctx.font = str;\n                    }\n                    break;\n                case D2DType.D2D_SETFILLSTYLE:\n                    {\n                        const color = this.owner.getLong(ins + 8);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.fillStyle = cssColor;\n                        //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\n                    }\n                    break;\n                case D2DType.D2D_SETSTROKESTYLE:\n                    {\n                        const color = this.owner.getLong(ins + 8);\n                        const cssColor = \"#\" + (\"00000000\" + color.toString(16)).slice(-8);\n                        this.ctx.strokeStyle = cssColor;\n                    }\n                    break;\n                case D2DType.D2D_SETLINEWIDTH:\n                    {\n                        const width = this.owner.getShort(ins + 8);\n                        this.ctx.lineWidth = width;\n                        //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\n                    }\n                    break;\n                case D2DType.D2D_MOVETO:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        this.ctx.moveTo(x, y);\n                    }\n                    break;\n                case D2DType.D2D_LINETO:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        this.ctx.lineTo(x, y);\n                    }\n                    break;\n                case D2DType.D2D_BEZIERTO:\n                    {\n                        const cp1x = this.owner.getDouble(ins + 8);\n                        const cp1y = this.owner.getDouble(ins + 16);\n                        const cp2x = this.owner.getDouble(ins + 24);\n                        const cp2y = this.owner.getDouble(ins + 32);\n                        const x = this.owner.getDouble(ins + 40);\n                        const y = this.owner.getDouble(ins + 48);\n                        this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n                    }\n                    break;\n                case D2DType.D2D_BEGINPATH:\n                    {\n                        this.ctx.beginPath();\n                    }\n                    break;\n                case D2DType.D2D_FILL:\n                    {\n                        this.ctx.fill();\n                    }\n                    break;\n                case D2DType.D2D_SAVE:\n                    {\n                        this.ctx.save();\n                    }\n                    break;\n                case D2DType.D2D_RESTORE:\n                    {\n                        this.ctx.restore();\n                    }\n                    break;\n                case D2DType.D2D_STROKE:\n                    {\n                        this.ctx.stroke();\n                    }\n                    break;\n                case D2DType.D2D_ARC:\n                    {\n                        const x = this.owner.getDouble(ins + 8);\n                        const y = this.owner.getDouble(ins + 16);\n                        const radius = this.owner.getDouble(ins + 24);\n                        const startAngle = this.owner.getDouble(ins + 32);\n                        const endAngle = this.owner.getDouble(ins + 40);\n                        const counterClockwise = (this.owner.getLong(ins + 48) != 0);\n                        this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise);\n                    }\n                    break;\n                case D2DType.D2D_IMAGEDATA:\n                    {\n                        const start = this.owner.getLong(ins + 8);\n                        const length = this.owner.getLong(ins + 12);\n                        const width = this.owner.getLong(ins + 16);\n                        const height = this.owner.getLong(ins + 20);\n                        const id = this.owner.getLong(ins + 24);\n                        if (id in this.precomputedObjects)\n                            console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\n                        if (this.owner.isWasmModule) {\n                            const z = new Uint8ClampedArray(this.owner.memory.buffer, start, length);\n                            this.precomputedObjects[id] = new ImageData(z, width, height);\n                        }\n                        else { // Uint8ClampedArray doesn't support shared memory\n                            this.precomputedObjects[id] = { mem8: new Uint8Array(this.owner.memory.buffer, start, length), width: width, height: height };\n                        }\n                        //console.log(\"D2D_IMAGEDATA\",start, length, width, height, this.imageData[start]);\n                    }\n                    break;\n                case D2DType.D2D_CREATERADIALGRADIENT:\n                    {\n                        const x0 = this.owner.getDouble(ins + 8);\n                        const y0 = this.owner.getDouble(ins + 16);\n                        const radius0 = this.owner.getDouble(ins + 24);\n                        const x1 = this.owner.getDouble(ins + 32);\n                        const y1 = this.owner.getDouble(ins + 40);\n                        const radius1 = this.owner.getDouble(ins + 48);\n                        const id = this.owner.getLong(ins + 56);\n                        let gradient = this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\n                        if (id in this.precomputedObjects)\n                            console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\n                        this.precomputedObjects[id] = gradient;\n                    }\n                    break;\n                case D2DType.D2D_SETCOLORSTOP:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        const pos = this.owner.getLong(ins + 12);\n                        const cssColor = this.owner.getString(this.owner.getLong(ins + 16));\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        gradient.addColorStop(pos, cssColor);\n                    }\n                    break;\n                case D2DType.D2D_SETFILLSTYLEGRADIENT:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \" + id);\n                        const gradient = this.precomputedObjects[id];\n                        this.ctx.fillStyle = gradient;\n                    }\n                    break;\n                case D2DType.D2D_RELEASEID:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        if (this.precomputedObjects[id])\n                            delete this.precomputedObjects[id];\n                        else\n                            console.log(\"warning: D2D_RELEASEID with undefined ID \", id);\n                    }\n                    break;\n                case D2DType.D2D_PUTIMAGEDATA:\n                    {\n                        const id = this.owner.getLong(ins + 8);\n                        const dx = this.owner.getLong(ins + 12);\n                        const dy = this.owner.getLong(ins + 16);\n                        const dirtyX = this.owner.getLong(ins + 20);\n                        const dirtyY = this.owner.getLong(ins + 24);\n                        const dirtyWidth = this.owner.getLong(ins + 28);\n                        const dirtyHeight = this.owner.getLong(ins + 32);\n                        if (!(id in this.precomputedObjects))\n                            throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \" + id);\n                        //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\n                        let imgData;\n                        if (this.owner.isWasmModule) {\n                            //console.log(\"D2D_PUTIMAGEDATA isWasmModule\");\n                            imgData = this.precomputedObjects[id];\n                        }\n                        else { // Uint8ClampedArray doesn't support shared memory, so copy the memory\n                            //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\n                            const z = this.precomputedObjects[id]; // Uint8Array\n                            const ca = Uint8ClampedArray.from(z.mem8); // shallow copy\n                            imgData = new ImageData(ca, z.width, z.height);\n                        }\n                        if (dirtyWidth == 0 && dirtyHeight == 0) {\n                            this.ctx.putImageData(imgData, dx, dy);\n                        }\n                        else {\n                            this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\n                        }\n                    }\n                    break;\n                default:\n                    throw new Error(\"unimplemented or unknown Sequence Type in drawSeq: \" + type);\n            }\n            next = this.owner.getLong(ins); /* hdr->next */\n            if (next == 0) {\n                if (ins != lastins)\n                    throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\n                break;\n            }\n            ins = next;\n        }\n        if (this.cmdCompleteSignal)\n            this.cmdCompleteSignal.signal();\n        //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\n    }\n}\nexport class twrCanvasProxy {\n    canvasKeys;\n    drawCompleteSignal;\n    props;\n    owner;\n    constructor(params, owner) {\n        const [props, signalBuffer, canvasKeysBuffer] = params;\n        this.drawCompleteSignal = new twrSignal(signalBuffer);\n        this.canvasKeys = new twrSharedCircularBuffer(canvasKeysBuffer);\n        this.props = props;\n        this.owner = owner;\n        //console.log(\"Create New twrCanvasProxy: \",this.props)\n    }\n    charIn() {\n        //ctx.commit(); not avail in chrome\n        //postMessage([\"debug\", 'x']);\n        return this.canvasKeys.readWait(); // wait for a key, then read it\n    }\n    inkey() {\n        if (this.canvasKeys.isEmpty())\n            return 0;\n        else\n            return this.charIn();\n    }\n    getProp(pn) {\n        const propName = this.owner.getString(pn);\n        //console.log(\"enter twrCanvasProxy.getprop: \", pn, propName, this.props[propName], this.props);\n        return this.props[propName];\n    }\n    drawSeq(ds) {\n        this.drawCompleteSignal.reset();\n        postMessage([\"drawseq\", [ds]]);\n        this.drawCompleteSignal.wait();\n    }\n}\n//# sourceMappingURL=twrcanvas.js.map","import {twrWasmModuleBase, IModParams} from \"./twrmodbase.js\"\r\nimport {twrSharedCircularBuffer} from \"./twrcircular.js\";\r\nimport {twrSignal} from \"./twrsignal.js\";\r\n\r\n\r\n// Canvas have a size that will be set based on the character width x height\r\n// The display size for a canvas will default to this size, but can be changed in the HTML/JS via\r\n//    canvas.style.width = \"700px\";\r\n//    canvas.style.height = \"500px\";\r\n\r\nexport interface ICanvasProps {\r\n\tcharWidth: number,\r\n\tcharHeight: number,\r\n\tforeColor: number,\r\n\tbackColor: number,\r\n    widthInChars: number,\r\n    heightInChars: number,\r\n    canvasWidth:number,\r\n    canvasHeight:number\r\n}\r\n\r\nenum D2DType {\r\n    D2D_FILLRECT=1,\r\n    D2D_FILLCHAR=5,\r\n    D2D_SETLINEWIDTH=10,\r\n    D2D_SETFILLSTYLE=11,\r\n    D2D_SETFONT=12,\r\n    D2D_BEGINPATH=13,\r\n    D2D_MOVETO=14,\r\n    D2D_LINETO=15,\r\n    D2D_FILL=16,\r\n    D2D_STROKE=17,\r\n    D2D_SETSTROKESTYLE=18,\r\n    D2D_ARC=19,\r\n    D2D_STROKERECT=20,\r\n    D2D_FILLTEXT=21,\r\n    D2D_IMAGEDATA=22,\r\n    D2D_PUTIMAGEDATA=23,\r\n    D2D_BEZIERTO=24,\r\n    D2D_MEASURETEXT=25,\r\n    D2D_SAVE=26,\r\n    D2D_RESTORE=27,\r\n    D2D_CREATERADIALGRADIENT=28,\r\n    D2D_SETCOLORSTOP=29,\r\n    D2D_SETFILLSTYLEGRADIENT=30,\r\n    D2D_RELEASEID=31\r\n\r\n}\r\n\r\nexport type TCanvasProxyParams = [ICanvasProps, SharedArrayBuffer, SharedArrayBuffer];\r\n\r\nexport interface ICanvas {\r\n    props: ICanvasProps,\r\n    charIn?: ()=>number,\r\n    inkey?: ()=>number,\r\n    getProxyParams?: ()=>TCanvasProxyParams,\r\n    drawSeq: (ds:number)=>void,\r\n }\r\n \r\nexport class twrCanvas implements ICanvas {\r\n    ctx:CanvasRenderingContext2D|undefined;\r\n    props:ICanvasProps={charWidth: 0, charHeight: 0, foreColor: 0, backColor: 0, widthInChars: 0, heightInChars: 0, canvasHeight:0, canvasWidth:0};\r\n    owner: twrWasmModuleBase;\r\n    cmdCompleteSignal?:twrSignal;\r\n    canvasKeys?: twrSharedCircularBuffer;\r\n    precomputedObjects: {  [index: number]: \r\n        (ImageData | {mem8:Uint8Array, width:number, height:number})  |\r\n        CanvasGradient\r\n    };\r\n\r\n    constructor(element:HTMLCanvasElement|null|undefined, modParams:IModParams, modbase:twrWasmModuleBase) {\r\n        const {forecolor, backcolor, fontsize, isd2dcanvas: isd2dcanvas} = modParams; \r\n        this.owner=modbase;\r\n        this.props.widthInChars=modParams.windim[0];\r\n        this.props.heightInChars=modParams.windim[1];\r\n\r\n        if (!this.owner.isWasmModule) {\r\n            this.cmdCompleteSignal=new twrSignal();\r\n            this.canvasKeys = new twrSharedCircularBuffer();  // tsconfig, lib must be set to 2017 or higher\r\n        }\r\n\r\n        this.precomputedObjects={};\r\n  \r\n        if (element) {\r\n            if (!element.getContext) throw new Error(\"attempted to create new twrCanvas with an element that is not a valid HTMLCanvasElement\");\r\n            let c=element.getContext(\"2d\");\r\n            if (!c) throw new Error(\"canvas 2D context not found in twrCanvasConstructor\");\r\n\r\n            c.font = fontsize.toString()+\"px Courier New\";\r\n            c.textBaseline=\"top\";\r\n            const sampleText=\"          \";\r\n            const tm=c.measureText(sampleText);\r\n            this.props.charWidth=Math.ceil(tm.width / sampleText.length);   // ceil rounds up (eg .9 -> 1)\r\n            let fM = c.measureText(\"X\"); \r\n            this.props.charHeight = Math.ceil(fM.fontBoundingBoxAscent + fM.fontBoundingBoxDescent);\r\n\r\n            if (!isd2dcanvas) {\r\n                element.width=this.props.charWidth*this.props.widthInChars;\r\n                element.height=this.props.charHeight*this.props.heightInChars;\r\n            }\r\n\r\n            this.props.canvasHeight=element.height;\r\n            this.props.canvasWidth=element.width;\r\n            //console.log(\"this.props.canvasHeight, this.props.canvasWidth\",this.props.canvasHeight,this.props.canvasWidth);\r\n\r\n            // reset after dims changed.  Not sure if ctx is needed to rest, but others do\r\n            let c2=element.getContext(\"2d\");\r\n            if (!c2) throw new Error(\"canvas 2D context not found in twrCanvas.constructor (2nd time)\");\r\n            this.ctx=c2;\r\n            this.ctx.font = fontsize.toString()+\"px Courier New\";\r\n            this.ctx.textBaseline=\"top\";\r\n\r\n            c2.fillStyle=backcolor;\r\n            this.props.backColor=Number(\"0x\"+c2.fillStyle.slice(1));\r\n\r\n            c2.fillStyle=forecolor;\r\n            this.props.foreColor=Number(\"0x\"+c2.fillStyle.slice(1));\r\n\r\n        }\r\n\r\n        //console.log(\"Create New twrCanvas: \",this.isValid(), element, this);\r\n\r\n        //console.log(\"twrCanvas.constructor props: \", this.props);\r\n   }\r\n\r\n    isValid() {\r\n        return !!this.ctx;\r\n    }\r\n\r\n    getProxyParams() : TCanvasProxyParams {\r\n        if (!this.cmdCompleteSignal || !this.canvasKeys) throw new Error(\"internal error in getProxyParams.\");\r\n        return [this.props, this.cmdCompleteSignal.sharedArray, this.canvasKeys.sharedArray];\r\n    }\r\n\r\n    getProp(pn:number): number {\r\n        if (!this.isValid()) console.log(\"internal error - getProp called on invalid twrCanvas\");\r\n        const propName=this.owner.getString(pn) as keyof ICanvasProps;\r\n        //console.log(\"enter twrCanvas.getprop: \", pn, propName, this.props[propName], this.props);\r\n        return this.props[propName];\r\n    }\r\n\r\n/* see draw2d.h for structs that match */\r\n\r\n    drawSeq(ds:number) {\r\n        //console.log(\"twr::Canvas enter drawSeq\");\r\n        if (!this.isValid()) console.log(\"internal error - drawSeq called on invalid twrCanvas\");\r\n        if (!this.ctx) return;\r\n\r\n        let ins=this.owner.getLong(ds);  /* ds->start */\r\n        const lastins=this.owner.getLong(ds+4);  /* ds->last */\r\n        //console.log(\"instruction start, last \",ins.toString(16), lastins.toString(16));\r\n\r\n        let next:number;\r\n        //let insCount=0;\r\n\r\n        while (1) {\r\n\r\n            //insCount++;\r\n\r\n            const type:D2DType=this.owner.getLong(ins+4);    /* hdr->type */\r\n            if (0/*type!=D2DType.D2D_FILLRECT*/) {\r\n                console.log(\"ins\",ins)\r\n                console.log(\"hdr.next\",this.owner.mem8[ins],this.owner.mem8[ins+1],this.owner.mem8[ins+2],this.owner.mem8[ins+3]);\r\n                console.log(\"hdr.type\",this.owner.mem8[ins+4],this.owner.mem8[ins+5]);\r\n                console.log(\"next 4 bytes\", this.owner.mem8[ins+6],this.owner.mem8[ins+7],this.owner.mem8[ins+8],this.owner.mem8[ins+9]);\r\n                console.log(\"and 4 more \", this.owner.mem8[ins+10],this.owner.mem8[ins+11],this.owner.mem8[ins+12],this.owner.mem8[ins+13]);\r\n                //console.log(\"ins, type, next is \", ins.toString(16), type.toString(16), next.toString(16));\r\n             }\r\n            switch (type) {\r\n                case D2DType.D2D_FILLRECT:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    const w=this.owner.getDouble(ins+24);\r\n                    const h=this.owner.getDouble(ins+32);\r\n                    this.ctx.fillRect(x, y, w, h);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_STROKERECT:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    const w=this.owner.getDouble(ins+24);\r\n                    const h=this.owner.getDouble(ins+32);\r\n                    this.ctx.strokeRect(x, y, w, h);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_FILLCHAR:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    const c=this.owner.getShort(ins+24);\r\n                    let txt=String.fromCharCode(c);\r\n                    this.ctx.fillText(txt, x, y);\r\n                }\r\n                    break;\r\n\r\n                \r\n                case D2DType.D2D_FILLTEXT:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    const str=this.owner.getString(this.owner.getLong(ins+24));\r\n\r\n                    //console.log(\"filltext \",x,y,str)\r\n    \r\n                    this.ctx.fillText(str, x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_MEASURETEXT:\r\n                {\r\n                    const str=this.owner.getString(this.owner.getLong(ins+8));\r\n                    const tmidx=this.owner.getLong(ins+12);\r\n    \r\n                    const tm=this.ctx.measureText(str);\r\n                    this.owner.setDouble(tmidx+0, tm.actualBoundingBoxAscent);\r\n                    this.owner.setDouble(tmidx+8, tm.actualBoundingBoxDescent);\r\n                    this.owner.setDouble(tmidx+16, tm.actualBoundingBoxLeft);\r\n                    this.owner.setDouble(tmidx+24, tm.actualBoundingBoxRight);\r\n                    this.owner.setDouble(tmidx+32, tm.fontBoundingBoxAscent);\r\n                    this.owner.setDouble(tmidx+40, tm.fontBoundingBoxDescent);\r\n                    this.owner.setDouble(tmidx+48, tm.width);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETFONT:\r\n                {\r\n                    const str=this.owner.getString(this.owner.getLong(ins+8));\r\n                    this.ctx.font=str;\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETFILLSTYLE:\r\n                {\r\n                    const color=this.owner.getLong(ins+8); \r\n                    const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);\r\n                    this.ctx.fillStyle = cssColor;\r\n                    //console.log(\"fillstyle: \", this.ctx.fillStyle, \":\", cssColor,\":\", color)\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETSTROKESTYLE:\r\n                {\r\n                    const color=this.owner.getLong(ins+8); \r\n                    const cssColor= \"#\"+(\"00000000\" + color.toString(16)).slice(-8);\r\n                    this.ctx.strokeStyle = cssColor;\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SETLINEWIDTH:\r\n                {\r\n                    const width=this.owner.getShort(ins+8);  \r\n                    this.ctx.lineWidth=width;\r\n                    //console.log(\"twrCanvas D2D_SETLINEWIDTH: \", this.ctx.lineWidth);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_MOVETO:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    this.ctx.moveTo(x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_LINETO:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    this.ctx.lineTo(x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_BEZIERTO:\r\n                {\r\n                    const cp1x=this.owner.getDouble(ins+8);\r\n                    const cp1y=this.owner.getDouble(ins+16);\r\n                    const cp2x=this.owner.getDouble(ins+24);\r\n                    const cp2y=this.owner.getDouble(ins+32);\r\n                    const x=this.owner.getDouble(ins+40);\r\n                    const y=this.owner.getDouble(ins+48);\r\n                    this.ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_BEGINPATH:\r\n                {\r\n                    this.ctx.beginPath();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_FILL:\r\n                {\r\n                    this.ctx.fill();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_SAVE:\r\n                {\r\n                    this.ctx.save();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_RESTORE:\r\n                {\r\n                    this.ctx.restore();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_STROKE:\r\n                {\r\n                    this.ctx.stroke();\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_ARC:\r\n                {\r\n                    const x=this.owner.getDouble(ins+8);\r\n                    const y=this.owner.getDouble(ins+16);\r\n                    const radius=this.owner.getDouble(ins+24);\r\n                    const startAngle=this.owner.getDouble(ins+32);\r\n                    const endAngle=this.owner.getDouble(ins+40);\r\n                    const counterClockwise= (this.owner.getLong(ins+48)!=0);\r\n\r\n                    this.ctx.arc(x, y, radius, startAngle, endAngle, counterClockwise)\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_IMAGEDATA:\r\n                {\r\n                    const start=this.owner.getLong(ins+8);\r\n                    const length=this.owner.getLong(ins+12);\r\n                    const width=this.owner.getLong(ins+16);\r\n                    const height=this.owner.getLong(ins+20);\r\n                    const id=this.owner.getLong(ins+24);\r\n\r\n                    if ( id in this.precomputedObjects ) console.log(\"warning: D2D_IMAGEDATA ID already exists.\");\r\n\r\n                    if (this.owner.isWasmModule) {\r\n                        const z = new Uint8ClampedArray(this.owner.memory!.buffer, start, length);\r\n                        this.precomputedObjects[id]=new ImageData(z, width, height);\r\n                    }\r\n                    else {  // Uint8ClampedArray doesn't support shared memory\r\n                        this.precomputedObjects[id]={mem8: new Uint8Array(this.owner.memory!.buffer, start, length), width:width, height:height};\r\n                    }\r\n                    //console.log(\"D2D_IMAGEDATA\",start, length, width, height, this.imageData[start]);\r\n                }\r\n                    break;\r\n\r\n                case D2DType.D2D_CREATERADIALGRADIENT:\r\n                {\r\n                    const x0=this.owner.getDouble(ins+8);\r\n                    const y0=this.owner.getDouble(ins+16);\r\n                    const radius0=this.owner.getDouble(ins+24);\r\n                    const x1=this.owner.getDouble(ins+32);\r\n                    const y1=this.owner.getDouble(ins+40);\r\n                    const radius1=this.owner.getDouble(ins+48);\r\n                    const id= this.owner.getLong(ins+56);\r\n\r\n                    let gradient=this.ctx.createRadialGradient(x0, y0, radius0, x1, y1, radius1);\r\n                    if ( id in this.precomputedObjects ) console.log(\"warning: D2D_CREATERADIALGRADIENT ID already exists.\");\r\n                    this.precomputedObjects[id] = gradient;\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_SETCOLORSTOP:\r\n                {\r\n                    const id = this.owner.getLong(ins+8);\r\n                    const pos=this.owner.getLong(ins+12);\r\n                    const cssColor= this.owner.getString(this.owner.getLong(ins+16));\r\n\r\n                    if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETCOLORSTOP with invalid ID: \"+id);\r\n                    const gradient=this.precomputedObjects[id] as CanvasGradient;\r\n                    gradient.addColorStop(pos, cssColor);\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_SETFILLSTYLEGRADIENT:\r\n                {\r\n                    const id=this.owner.getLong(ins+8);\r\n                    if (!(id in this.precomputedObjects)) throw new Error(\"D2D_SETFILLSTYLEGRADIENT with invalid ID: \"+id);\r\n                    const gradient=this.precomputedObjects[id] as CanvasGradient;\r\n                    this.ctx.fillStyle=gradient;\r\n                }\r\n                    break\r\n\r\n                case D2DType.D2D_RELEASEID:\r\n                {\r\n                    const id=this.owner.getLong(ins+8);\r\n                    if (this.precomputedObjects[id])\r\n                        delete this.precomputedObjects[id];\r\n                    else\r\n                        console.log(\"warning: D2D_RELEASEID with undefined ID \",id);\r\n                }\r\n                    break\r\n\r\n                    \r\n\r\n                case D2DType.D2D_PUTIMAGEDATA:\r\n                {\r\n                    const id=this.owner.getLong(ins+8);\r\n                    const dx=this.owner.getLong(ins+12);\r\n                    const dy=this.owner.getLong(ins+16);\r\n                    const dirtyX=this.owner.getLong(ins+20);\r\n                    const dirtyY=this.owner.getLong(ins+24);\r\n                    const dirtyWidth=this.owner.getLong(ins+28);\r\n                    const dirtyHeight=this.owner.getLong(ins+32);\r\n\r\n                    if (!(id in this.precomputedObjects)) throw new Error(\"D2D_PUTIMAGEDATA with invalid ID: \"+id);\r\n\r\n                    //console.log(\"D2D_PUTIMAGEDATA\",start, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight, this.imageData[start]);\r\n\r\n                    let imgData:ImageData;\r\n                    if (this.owner.isWasmModule) {\r\n                        //console.log(\"D2D_PUTIMAGEDATA isWasmModule\");\r\n                        imgData=this.precomputedObjects[id] as ImageData;\r\n                    }\r\n                    else {  // Uint8ClampedArray doesn't support shared memory, so copy the memory\r\n                        //console.log(\"D2D_PUTIMAGEDATA wasmModuleAsync\");\r\n                        const z = this.precomputedObjects[id] as {mem8:Uint8Array, width:number, height:number}; // Uint8Array\r\n                        const ca=Uint8ClampedArray.from(z.mem8);  // shallow copy\r\n                        imgData=new ImageData(ca, z.width, z.height);\r\n                    }\r\n                    \r\n                    if (dirtyWidth==0 && dirtyHeight==0) {\r\n                        this.ctx.putImageData(imgData, dx, dy);\r\n                    }\r\n                    else {\r\n                        this.ctx.putImageData(imgData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);\r\n                    }\r\n                }\r\n                    break;\r\n\r\n                default:\r\n                    throw new Error (\"unimplemented or unknown Sequence Type in drawSeq: \"+type);\r\n            }\r\n            next=this.owner.getLong(ins);  /* hdr->next */\r\n            if (next==0) {\r\n                if (ins!=lastins) throw new Error(\"assert type error in twrcanvas, ins!=lastins\");\r\n                break;\r\n            }\r\n            ins=next;\r\n        }\r\n\r\n        if (this.cmdCompleteSignal) this.cmdCompleteSignal.signal();\r\n        //console.log(\"Canvas.drawSeq() completed  with instruction count of \", insCount);\r\n    }\r\n}\r\n\r\nexport class twrCanvasProxy implements ICanvas {\r\n    canvasKeys: twrSharedCircularBuffer;\r\n    drawCompleteSignal:twrSignal;\r\n    props: ICanvasProps;\r\n    owner: twrWasmModuleBase;\r\n\r\n    constructor(params:TCanvasProxyParams, owner:twrWasmModuleBase) {\r\n        const [props, signalBuffer,  canvasKeysBuffer] = params;\r\n        this.drawCompleteSignal = new twrSignal(signalBuffer);\r\n        this.canvasKeys = new twrSharedCircularBuffer(canvasKeysBuffer);\r\n        this.props=props;\r\n        this.owner=owner;\r\n\r\n        //console.log(\"Create New twrCanvasProxy: \",this.props)\r\n\r\n    }\r\n\r\n    charIn() {  \r\n        //ctx.commit(); not avail in chrome\r\n    \r\n        //postMessage([\"debug\", 'x']);\r\n        \r\n        return this.canvasKeys.readWait();  // wait for a key, then read it\r\n    }\r\n    \r\n    inkey() {\r\n        if (this.canvasKeys.isEmpty())\r\n            return 0;\r\n        else\r\n            return this.charIn();    \r\n    }\r\n\r\n    getProp(pn:number): number {\r\n        const propName=this.owner.getString(pn) as keyof ICanvasProps;\r\n        //console.log(\"enter twrCanvasProxy.getprop: \", pn, propName, this.props[propName], this.props);\r\n        return this.props[propName];\r\n    }\r\n    \r\n    drawSeq(ds:number) {\r\n        this.drawCompleteSignal.reset();\r\n        postMessage([\"drawseq\", [ds]]);\r\n        this.drawCompleteSignal.wait();\r\n    }\r\n}\r\n","//\n// This class implements a simple signal/wait mechanism\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\n//\nvar twrSignalState;\n(function (twrSignalState) {\n    twrSignalState[twrSignalState[\"WAITING\"] = 0] = \"WAITING\";\n    twrSignalState[twrSignalState[\"SIGNALED\"] = 1] = \"SIGNALED\";\n})(twrSignalState || (twrSignalState = {}));\n;\nexport class twrSignal {\n    sharedArray;\n    buf;\n    constructor(sa) {\n        if (typeof window !== 'undefined') { // this check only works if window valid\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:'))\n                throw new Error(\"twrSignal constructor, crossOriginIsolated=\" + crossOriginIsolated + \". See SharedArrayBuffer docs.\");\n        }\n        if (sa)\n            this.sharedArray = sa;\n        else\n            this.sharedArray = new SharedArrayBuffer(4);\n        this.buf = new Int32Array(this.sharedArray);\n        this.buf[0] = twrSignalState.WAITING;\n    }\n    signal() {\n        this.buf[0] = twrSignalState.SIGNALED;\n        //console.log(\"about to signal\");\n        Atomics.notify(this.buf, 0);\n    }\n    wait() {\n        if (this.buf[0] == twrSignalState.WAITING) {\n            //console.log(\"waiting...\");\n            Atomics.wait(this.buf, 0, twrSignalState.WAITING);\n            //console.log(\"released...\");\n        }\n    }\n    isSignaled() {\n        return this.buf[0] == twrSignalState.SIGNALED;\n    }\n    reset() {\n        this.buf[0] = twrSignalState.WAITING;\n    }\n}\n//# sourceMappingURL=twrsignal.js.map","//\r\n// This class implements a simple signal/wait mechanism\r\n// It is used by the WebWorker thread to block/wait, and the main JS thread to signal when to unblock\r\n//\r\n\r\nenum twrSignalState {\r\n    WAITING=0,\r\n    SIGNALED=1\r\n};\r\n\r\nexport class twrSignal {\r\n\tsharedArray:SharedArrayBuffer;\r\n\tbuf:Int32Array;\r\n\r\n \tconstructor (sa?:SharedArrayBuffer) {\r\n        if (typeof window !== 'undefined') { // this check only works if window valid\r\n            if (!crossOriginIsolated && !(window.location.protocol === 'file:')) \r\n                throw new Error(\"twrSignal constructor, crossOriginIsolated=\"+crossOriginIsolated+\". See SharedArrayBuffer docs.\");\r\n        }\r\n        if (sa) this.sharedArray=sa;\r\n        else this.sharedArray=new SharedArrayBuffer(4);\r\n\t\tthis.buf=new Int32Array(this.sharedArray);\r\n        this.buf[0]=twrSignalState.WAITING;\r\n\t}\r\n\r\n\tsignal() {\r\n        this.buf[0]=twrSignalState.SIGNALED;  \r\n        //console.log(\"about to signal\");\r\n        Atomics.notify(this.buf, 0);   \r\n\t}\r\n\r\n    wait() {\r\n        if (this.buf[0]==twrSignalState.WAITING) {\r\n            //console.log(\"waiting...\");\r\n            Atomics.wait(this.buf, 0, twrSignalState.WAITING);\r\n            //console.log(\"released...\");\r\n\r\n        }\r\n\t}\r\n    isSignaled():boolean {\r\n        return this.buf[0]==twrSignalState.SIGNALED;\r\n    }\r\n\r\n    reset() {\r\n        this.buf[0]=twrSignalState.WAITING;\r\n    }\r\n}\r\n","export function twrTimeImpl() {\n    return Date.now();\n}\n//# sourceMappingURL=twrdate.js.map","\r\nexport function twrTimeImpl() {\r\n\r\n    return Date.now();\r\n\r\n}","import { twrDebugLogImpl } from \"./twrdebug.js\";\nimport { twrWasmModuleInJSMain } from \"./twrmodjsmain.js\";\nimport { twrWaitingCalls } from \"./twrwaitingcalls.js\";\nimport whatkey from \"whatkey\";\nexport class twrWasmModuleAsync extends twrWasmModuleInJSMain {\n    myWorker;\n    malloc;\n    loadWasmResolve;\n    loadWasmReject;\n    executeCResolve;\n    executeCReject;\n    initLW = false;\n    waitingcalls;\n    constructor(opts) {\n        super(opts);\n        this.malloc = (size) => { throw new Error(\"Error - un-init malloc called.\"); };\n        if (!window.Worker)\n            throw new Error(\"This browser doesn't support web workers.\");\n        this.myWorker = new Worker(new URL('twrmodworker.js', import.meta.url), { type: \"module\" });\n        this.myWorker.onmessage = this.processMsg.bind(this);\n    }\n    // overrides base implementation\n    async loadWasm(pathToLoad) {\n        if (this.initLW)\n            throw new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\n        this.initLW = true;\n        return new Promise((resolve, reject) => {\n            this.loadWasmResolve = resolve;\n            this.loadWasmReject = reject;\n            this.malloc = (size) => {\n                return this.executeCImpl(\"twr_malloc\", [size]);\n            };\n            this.waitingcalls = new twrWaitingCalls(); // handle's calls that cross the worker thread - main js thread boundary\n            let canvas;\n            if (this.d2dcanvas.isValid())\n                canvas = this.d2dcanvas;\n            else\n                canvas = this.iocanvas;\n            const modWorkerParams = {\n                divProxyParams: this.iodiv.getProxyParams(),\n                canvasProxyParams: canvas.getProxyParams(),\n                waitingCallsProxyParams: this.waitingcalls.getProxyParams(),\n            };\n            const urlToLoad = new URL(pathToLoad, document.URL);\n            const startMsg = { urlToLoad: urlToLoad.href, modWorkerParams: modWorkerParams, modParams: this.modParams };\n            this.myWorker.postMessage(['startup', startMsg]);\n        });\n    }\n    async executeC(params) {\n        const cparams = await this.preCallC(params); // will also validate params[0]\n        return this.executeCImpl(params[0], cparams);\n    }\n    async executeCImpl(fname, cparams = []) {\n        return new Promise((resolve, reject) => {\n            this.executeCResolve = resolve;\n            this.executeCReject = reject;\n            this.myWorker.postMessage(['executeC', fname, cparams]);\n        });\n    }\n    // this function should be called from HTML \"keydown\" event from <div>\n    keyDownDiv(ev) {\n        if (!this.iodiv || !this.iodiv.divKeys)\n            throw new Error(\"unexpected undefined twrWasmAsyncModule.divKeys\");\n        this.iodiv.divKeys.write(whatkey(ev).char.charCodeAt(0));\n    }\n    // this function should be called from HTML \"keydown\" event from <canvas>\n    keyDownCanvas(ev) {\n        if (!this.iocanvas || !this.iocanvas.canvasKeys)\n            throw new Error(\"unexpected undefined twrWasmAsyncModule.canvasKeys\");\n        this.iocanvas.canvasKeys.write(whatkey(ev).char.charCodeAt(0));\n    }\n    processMsg(event) {\n        const msgType = event.data[0];\n        const d = event.data[1];\n        //console.log(\"twrWasmAsyncModule - got message: \"+event.data)\n        switch (msgType) {\n            case \"divout\":\n                if (this.iodiv.isValid())\n                    this.iodiv.charOut(d);\n                else\n                    console.log('error - msg divout received but iodiv is undefined.');\n                break;\n            case \"debug\":\n                twrDebugLogImpl(d);\n                break;\n            case \"drawseq\":\n                {\n                    //console.log(\"twrModAsync got message drawseq\");\n                    const [ds] = d;\n                    if (this.iocanvas.isValid())\n                        this.iocanvas.drawSeq(ds);\n                    else if (this.d2dcanvas.isValid())\n                        this.d2dcanvas.drawSeq(ds);\n                    else\n                        throw new Error('msg drawseq received but canvas is undefined.');\n                    break;\n                }\n            case \"setmemory\":\n                this.memory = d;\n                if (!this.memory)\n                    throw new Error(\"unexpected error - undefined memory in startupOkay msg\");\n                this.mem8 = new Uint8Array(this.memory.buffer);\n                this.mem32 = new Uint32Array(this.memory.buffer);\n                this.memD = new Float64Array(this.memory.buffer);\n                //console.log(\"memory set\",this.mem8.length);\n                break;\n            case \"startupFail\":\n                if (this.loadWasmReject)\n                    this.loadWasmReject(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\n                break;\n            case \"startupOkay\":\n                if (this.loadWasmResolve)\n                    this.loadWasmResolve(undefined);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\n                break;\n            case \"executeCFail\":\n                if (this.executeCReject)\n                    this.executeCReject(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCReject)\");\n                break;\n            case \"executeCOkay\":\n                if (this.executeCResolve)\n                    this.executeCResolve(d);\n                else\n                    throw new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCResolve)\");\n                break;\n            default:\n                if (!this.waitingcalls)\n                    throw new Error(\"internal error: this.waitingcalls undefined.\");\n                if (!this.waitingcalls.processMessage(msgType, d))\n                    throw new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \" + msgType);\n        }\n    }\n}\n//# sourceMappingURL=twrmodasync.js.map","import {IModOpts, IModParams, IModInWorkerParams} from \"./twrmodbase.js\";\r\nimport {twrDebugLogImpl} from \"./twrdebug.js\";\r\nimport {twrWasmModuleInJSMain} from \"./twrmodjsmain.js\"\r\nimport {twrWaitingCalls} from \"./twrwaitingcalls.js\"\r\nimport {twrCanvas} from \"./twrcanvas.js\";\r\n\r\nimport whatkey from \"whatkey\";\r\n\r\nexport type TAsyncModStartupMsg = {\r\n\turlToLoad: string,\r\n\tmodWorkerParams: IModInWorkerParams,\r\n\tmodParams: IModParams \r\n};\r\n\t\t\r\nexport class twrWasmModuleAsync extends twrWasmModuleInJSMain {\r\n\tmyWorker:Worker;\r\n\tmalloc:(size:number)=>Promise<number>;\r\n\tloadWasmResolve?: (value: void) => void;\r\n\tloadWasmReject?: (reason?: any) => void;\r\n\texecuteCResolve?: (value: unknown) => void;\r\n\texecuteCReject?: (reason?: any) => void;\r\n\tinitLW=false;\r\n\twaitingcalls?:twrWaitingCalls;\r\n\r\n\r\n\tconstructor(opts?:IModOpts) {\r\n\t\tsuper(opts);\r\n\r\n\t\tthis.malloc=(size:number)=>{throw new Error(\"Error - un-init malloc called.\")};\r\n\r\n\t\tif (!window.Worker) throw new Error(\"This browser doesn't support web workers.\");\r\n\t\tthis.myWorker = new Worker(new URL('twrmodworker.js', import.meta.url), {type: \"module\" });\r\n\t\tthis.myWorker.onmessage= this.processMsg.bind(this);\r\n\t}\r\n\r\n\t// overrides base implementation\r\n\tasync loadWasm(pathToLoad:string) {\r\n\t\tif (this.initLW) \tthrow new Error(\"twrWasmAsyncModule::loadWasm can only be called once per twrWasmAsyncModule instance\");\r\n\t\tthis.initLW=true;\r\n\r\n\t\treturn new Promise<void>((resolve, reject)=>{\r\n\t\t\tthis.loadWasmResolve=resolve;\r\n\t\t\tthis.loadWasmReject=reject;\r\n\r\n\t\t\tthis.malloc = (size:number) => {\r\n\t\t\t\treturn this.executeCImpl(\"twr_malloc\", [size]) as Promise<number>;\r\n\t\t\t}\r\n\r\n\t\t\tthis.waitingcalls=new twrWaitingCalls();  // handle's calls that cross the worker thread - main js thread boundary\r\n\r\n\t\t\tlet canvas:twrCanvas;\r\n\t\t\tif (this.d2dcanvas.isValid()) canvas=this.d2dcanvas;\r\n\t\t\telse canvas=this.iocanvas;\r\n\r\n\t\t\tconst modWorkerParams={\r\n\t\t\t\tdivProxyParams: this.iodiv.getProxyParams(), \r\n\t\t\t\tcanvasProxyParams: canvas.getProxyParams(),\r\n\t\t\t\twaitingCallsProxyParams: this.waitingcalls.getProxyParams(),\r\n\t\t\t};\r\n\t\t\tconst urlToLoad = new URL(pathToLoad, document.URL);\r\n\t\t\tconst startMsg:TAsyncModStartupMsg={ urlToLoad: urlToLoad.href, modWorkerParams: modWorkerParams, modParams: this.modParams};\r\n\t\t\tthis.myWorker.postMessage(['startup', startMsg]);\r\n\t\t});\r\n\t}\r\n\r\n\tasync executeC(params:[string, ...(string|number|Uint8Array)[]]) {\r\n\t\tconst cparams=await this.preCallC(params); // will also validate params[0]\r\n\t\treturn this.executeCImpl(params[0], cparams);\r\n\t}\t\r\n\r\n\tasync executeCImpl(fname:string, cparams:number[]=[]) {\r\n\t\treturn new Promise((resolve, reject)=>{\r\n\t\t\tthis.executeCResolve=resolve;\r\n\t\t\tthis.executeCReject=reject;\r\n\t\t\tthis.myWorker.postMessage(['executeC', fname, cparams]);\r\n\t\t});\r\n\t}\r\n\t\r\n\t// this function should be called from HTML \"keydown\" event from <div>\r\n\tkeyDownDiv(ev:KeyboardEvent) {\r\n\t\tif (!this.iodiv || !this.iodiv.divKeys) throw new Error(\"unexpected undefined twrWasmAsyncModule.divKeys\");\r\n\t\tthis.iodiv.divKeys.write(whatkey(ev).char.charCodeAt(0));\r\n\t}\r\n\r\n\t// this function should be called from HTML \"keydown\" event from <canvas>\r\n\tkeyDownCanvas(ev:KeyboardEvent) {\r\n\t\tif (!this.iocanvas || !this.iocanvas.canvasKeys) throw new Error(\"unexpected undefined twrWasmAsyncModule.canvasKeys\");\r\n\t\tthis.iocanvas.canvasKeys.write(whatkey(ev).char.charCodeAt(0));\r\n\t}\r\n\r\n\tprocessMsg(event: MessageEvent) {\r\n\t\tconst msgType=event.data[0];\r\n\t\tconst d=event.data[1];\r\n\r\n\t\t//console.log(\"twrWasmAsyncModule - got message: \"+event.data)\r\n\r\n\t\tswitch (msgType) {\r\n\t\t\tcase \"divout\":\r\n\t\t\t\tif (this.iodiv.isValid())\r\n\t\t\t\t\tthis.iodiv.charOut(d);\r\n\t\t\t\telse\r\n\t\t\t\t\tconsole.log('error - msg divout received but iodiv is undefined.')\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"debug\":\r\n\t\t\t\ttwrDebugLogImpl(d);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"drawseq\":\r\n\t\t\t{\r\n\t\t\t\t//console.log(\"twrModAsync got message drawseq\");\r\n\t\t\t\tconst [ds] =  d;\r\n\t\t\t\tif (this.iocanvas.isValid())\r\n\t\t\t\t\tthis.iocanvas.drawSeq(ds);\r\n\t\t\t\telse if (this.d2dcanvas.isValid())\r\n\t\t\t\t\tthis.d2dcanvas.drawSeq(ds);\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error('msg drawseq received but canvas is undefined.')\r\n\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tcase \"setmemory\":\r\n\t\t\t\tthis.memory=d;\r\n\t\t\t\tif (!this.memory) throw new Error(\"unexpected error - undefined memory in startupOkay msg\");\r\n\t\t\t\tthis.mem8 = new Uint8Array(this.memory.buffer);\r\n\t\t\t\tthis.mem32 = new Uint32Array(this.memory.buffer);\r\n\t\t\t\tthis.memD = new Float64Array(this.memory.buffer);\r\n\t\t\t\t//console.log(\"memory set\",this.mem8.length);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"startupFail\":\r\n\t\t\t\tif (this.loadWasmReject)\r\n\t\t\t\t\tthis.loadWasmReject(d);\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmReject)\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"startupOkay\":\r\n\r\n\t\t\t\tif (this.loadWasmResolve)\r\n\t\t\t\t\tthis.loadWasmResolve(undefined);\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined loadWasmResolve)\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"executeCFail\":\r\n\t\t\t\tif (this.executeCReject)\r\n\t\t\t\t\tthis.executeCReject(d);\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCReject)\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"executeCOkay\":\r\n\t\t\t\tif (this.executeCResolve)\r\n\t\t\t\t\tthis.executeCResolve(d);\r\n\t\t\t\telse\r\n\t\t\t\t\tthrow new Error(\"twrWasmAsyncModule.processMsg unexpected error (undefined executeCResolve)\");\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tif (!this.waitingcalls) throw new Error (\"internal error: this.waitingcalls undefined.\")\r\n\t\t\t\tif (!this.waitingcalls.processMessage(msgType, d))\r\n\t\t\t\t\tthrow new Error(\"twrWasmAsyncModule - unknown and unexpected msgType: \"+msgType);\r\n\t\t}\r\n\t}\r\n}\r\n","import { twrSignal } from \"./twrsignal.js\";\nimport { twrTimeImpl } from \"./twrdate.js\";\n// This class is used in the  Main JS thread \nexport class twrWaitingCalls {\n    callCompleteSignal;\n    parameters;\n    constructor() {\n        this.callCompleteSignal = new twrSignal();\n        this.parameters = new Uint32Array(new SharedArrayBuffer(4));\n    }\n    startSleep(ms) {\n        setTimeout(() => {\n            this.callCompleteSignal.signal();\n        }, ms);\n    }\n    time() {\n        const ms = twrTimeImpl();\n        this.parameters[0] = ms;\n        this.callCompleteSignal.signal();\n    }\n    getProxyParams() {\n        return [this.callCompleteSignal.sharedArray, this.parameters.buffer];\n    }\n    processMessage(msgType, data) {\n        switch (msgType) {\n            case \"sleep\":\n                const [ms] = data;\n                this.startSleep(ms);\n                break;\n            case \"time\":\n                this.time();\n                break;\n            default:\n                return false;\n        }\n        return true;\n    }\n}\n// This class is used in the worker thread \nexport class twrWaitingCallsProxy {\n    callCompleteSignal;\n    parameters;\n    constructor(params) {\n        this.callCompleteSignal = new twrSignal(params[0]);\n        this.parameters = new Uint32Array(params[1]);\n    }\n    sleep(ms) {\n        this.callCompleteSignal.reset();\n        postMessage([\"sleep\", [ms]]);\n        this.callCompleteSignal.wait();\n    }\n    time() {\n        this.callCompleteSignal.reset();\n        postMessage([\"time\"]);\n        this.callCompleteSignal.wait();\n        return this.parameters[0];\n    }\n}\n//# sourceMappingURL=twrwaitingcalls.js.map","import { twrSignal } from \"./twrsignal.js\";\r\nimport {twrTimeImpl} from \"./twrdate.js\"\r\n\r\n// These classes are used to proxy a call across the worker thread - main thread boundary and wait for the result\r\n\r\nexport type TWaitingCallsProxyParams = [SharedArrayBuffer, SharedArrayBuffer];   // twrSignal, parameters \r\n\r\n// This class is used in the  Main JS thread \r\nexport class twrWaitingCalls {\r\n\tcallCompleteSignal:twrSignal;\r\n\tparameters:Uint32Array;\r\n\r\n\tconstructor() {\r\n\t\tthis.callCompleteSignal=new twrSignal();\r\n\t\tthis.parameters=new Uint32Array(new SharedArrayBuffer(4));\r\n\t}\r\n\r\n\tprivate startSleep(ms:number) {\r\n\r\n\t\tsetTimeout(()=>{\r\n\t\t\tthis.callCompleteSignal.signal();\r\n\t\t}, ms);\r\n\t\t\r\n\t}\r\n\r\n\tprivate time() {\r\n\t\tconst ms=twrTimeImpl();\r\n\t\tthis.parameters[0]=ms;\r\n\t\tthis.callCompleteSignal.signal();\r\n\t}\r\n\r\n\tgetProxyParams():TWaitingCallsProxyParams {\r\n\t\treturn [this.callCompleteSignal.sharedArray, this.parameters.buffer as SharedArrayBuffer];\t\r\n\t}\r\n\r\n\tprocessMessage(msgType:string, data:any[]):boolean {\r\n\t\tswitch (msgType) {\r\n\t\t\tcase \"sleep\":\r\n\t\t\t\tconst [ms] =  data;\r\n\t\t\t\tthis.startSleep(ms);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase \"time\":\r\n\t\t\t\tthis.time();\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\tdefault:\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\n// This class is used in the worker thread \r\nexport class twrWaitingCallsProxy {\r\n\tcallCompleteSignal:twrSignal;\r\n\tparameters:Uint32Array;\r\n\r\n\tconstructor(params:TWaitingCallsProxyParams) {\r\n\t\tthis.callCompleteSignal=new twrSignal(params[0]);\r\n\t\tthis.parameters=new Uint32Array(params[1]);\r\n\t}\r\n\r\n\tsleep(ms:number) {\r\n\t\tthis.callCompleteSignal.reset();\r\n\t\tpostMessage([\"sleep\", [ms]]);\r\n\t\tthis.callCompleteSignal.wait();\r\n\t}\r\n\r\n\ttime() {\r\n\t\tthis.callCompleteSignal.reset();\r\n\t\tpostMessage([\"time\"]);\r\n\t\tthis.callCompleteSignal.wait();\r\n\t\treturn this.parameters[0];\r\n\t}\r\n\r\n}\r\n","const keycodeCtrlKeys = {\n  'a': 'selectAll',\n  'c': 'copy',\n  's': 'save',\n  'v': 'paste',\n  'x': 'cut',\n  'y': 'redo',\n  'z': 'undo'\n};\n\nconst keycodeShiftedKeys = {\n  '/': '?',\n  '.': '>',\n  ',': '<',\n  '\\'': '\\\"',\n  ';': ':',\n  '[': '{',\n  ']': '}',\n  '\\\\': '|',\n  '`': '~',\n  '=': '+',\n  '-': '_',\n  '1': '!',\n  '2': '@',\n  '3': '#',\n  '4': '$',\n  '5': '%',\n  '6': '^',\n  '7': '&',\n  '8': '*',\n  '9': '(',\n  '0': ')',\n  'a': 'A',\n  'b': 'B',\n  'c': 'C',\n  'd': 'D',\n  'e': 'E',\n  'f': 'F',\n  'g': 'G',\n  'h': 'H',\n  'i': 'I',\n  'j': 'J',\n  'k': 'K',\n  'l': 'L',\n  'm': 'M',\n  'n': 'N',\n  'o': 'O',\n  'p': 'P',\n  'q': 'q',\n  'r': 'R',\n  's': 'S',\n  't': 'T',\n  'u': 'U',\n  'v': 'V',\n  'w': 'W',\n  'x': 'X',\n  'y': 'Y',\n  'z': 'Z'\n};\n\nconst keyCodeUnshiftedKeys = {};\nfor (const x in keycodeShiftedKeys) {\n  const shiftedKey = keycodeShiftedKeys[x];\n  keyCodeUnshiftedKeys[shiftedKey] = x;\n}\n\nconst keydownKeycodeDictionary = {\n  0: '\\\\',\n\n  8: 'backspace',\n  9: 'tab',\n\n  12: 'num',\n  13: 'enter',\n\n  16: 'shift',\n  17: 'ctrl',\n  18: 'alt',   // aka 'option'\n  19: 'pause', // or sometimes 'break'?\n  20: 'caps',\n\n  27: 'esc',\n\n  32: ' ',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n\n  44: 'print',\n  45: 'insert',\n  46: 'delete',\n\n  48: '0',\n  49: '1',\n  50: '2',\n  51: '3',\n  52: '4',\n  53: '5',\n  54: '6',\n  55: '7',\n  56: '8',\n  57: '9',\n\n  59: ';',\n\n  61: '=',\n\n  65: 'a',\n  66: 'b',\n  67: 'c',\n  68: 'd',\n  69: 'e',\n  70: 'f',\n  71: 'g',\n  72: 'h',\n  73: 'i',\n  74: 'j',\n  75: 'k',\n  76: 'l',\n  77: 'm',\n  78: 'n',\n  79: 'o',\n  80: 'p',\n  81: 'q',\n  82: 'r',\n  83: 's',\n  84: 't',\n  85: 'u',\n  86: 'v',\n  87: 'w',\n  88: 'x',\n  89: 'y',\n  90: 'z',\n  91: 'meta',   // 'left window key'\n  92: 'meta',   // 'right window key'\n  93: 'meta',   // 'select key'\n\n  96: 'num0',\n  97: 'num1',\n  98: 'num2',\n  99: 'num3',\n  100: 'num4',\n  101: 'num5',\n  102: 'num6',\n  103: 'num7',\n  104: 'num8',\n  105: 'num9',\n  106: '*',\n  107: '+',\n  108: 'num_enter',\n  109: 'num_subtract',\n  110: 'num_decimal',\n  111: 'num_divide',\n  112: 'f1',\n  113: 'f2',\n  114: 'f3',\n  115: 'f4',\n  116: 'f5',\n  117: 'f6',\n  118: 'f7',\n  119: 'f8',\n  120: 'f9',\n  121: 'f10',\n  122: 'f11',\n  123: 'f12',\n  124: 'print',\n\n  144: 'num',    // num lock\n  145: 'scroll', // scroll lock\n\n  173: '-',\n\n  186: ';',\n  187: '=',\n  188: ',',\n  189: '-',\n  190: '.',\n  191: '/',\n  192: '`',\n  219: '[',\n  220: '\\\\',\n  221: ']',\n  222: '\\'',\n  223: '`',\n  224: 'cmd',\n  225: 'alt',\n\n  57392: 'ctrl',\n  63289: 'num'\n};\n\nconst keypressCharacterMapOverides = {\n  '\\r': 'enter'\n};\nconst keypressCharacterMap = JSON.parse(JSON.stringify(keydownKeycodeDictionary));\nfor (const key of Object.keys(keypressCharacterMapOverides)) {\n  keypressCharacterMap[key] = keypressCharacterMapOverides[key];\n}\n\nconst keydownCharacterMap = {\n  'num_subtract': '-',\n  'num_enter': '\\n',\n  'num_decimal': '.',\n  'num_divide': '/',\n  'enter': '\\n',\n  'tab': '\\t',\n  'backspace': '\\b'\n};\n\nexport const unprintableKeys = [\n  'backspace','enter','tab','num',\n  'shift','meta','alt','pause','caps','esc',\n  'pageup','pagedown','end','home',\n  'left','up','right','down',\n  'print','insert','delete','cmd',\n  'f1','f2','f3','f4','f5','f6','f7','f8','f9','f10','f11','f12',\n  'scroll','ctrl'\n];\n\nconst validEvents = ['keydown', 'keyup'];\n\nconst isMobile = () => {\n  const ua = navigator.userAgent;\n  const mobile = /IEMobile|Windows Phone|Lumia/i.test(ua) ? 'w' : /iPhone|iP[oa]d/.test(ua) ? 'i' : /Android/.test(ua) ? 'a' : /BlackBerry|PlayBook|BB10/.test(ua) ? 'b' : /Mobile Safari/.test(ua) ? 's' : /webOS|Mobile|Tablet|Opera Mini|\\bCrMo\\/|Opera Mobi/i.test(ua) ? 1 : 0;\n  return mobile !== 0;\n};\n\nfunction getKeypressKeycodeValue(charcode) {\n  const character = String.fromCharCode(charcode);\n  if (isMobile()) { return character }\n  if (character in keyCodeUnshiftedKeys) {\n    return keyCodeUnshiftedKeys[character];\n  } else if (character in keypressCharacterMap) {\n    return keypressCharacterMap[character];\n  }\n  return character;\n}\n\nexport default function(event) {\n  let key;\n  if (event.type === 'keypress' && !isMobile()) {\n    key = getKeypressKeycodeValue(event.charCode);\n  } else if (event.type === 'keypress' && isMobile()) {\n    key = getKeypressKeycodeValue(event.keyCode);\n  } else if (validEvents.indexOf(event.type) > -1) {\n    if (event.which !== undefined) {\n      key = keydownKeycodeDictionary[event.which];\n    } else if (event.keyCode !== undefined) {\n      key = keydownKeycodeDictionary[event.keyCode];\n    } else {\n      key = 'enter';\n    }\n  } else {\n    return false;\n  }\n\n  let char = key;\n  if (event.shiftKey && key in keycodeShiftedKeys) {\n    char = keycodeShiftedKeys[key];\n  } else if (event.ctrlKey && key in keycodeCtrlKeys) {\n    char = keycodeCtrlKeys[key];\n  } else if (key in keydownCharacterMap) {\n    char = keydownCharacterMap[key];\n  }\n\n  return {\n    char,\n    key\n  };\n}\n","let workerURL = require('./helpers/get-worker-url');\nlet url = new __parcel__URL__(\"twrmodworker.2c672dbb.js\");\nmodule.exports = workerURL(url.toString(), url.origin, true);","\"use strict\";\n\nmodule.exports = function (workerUrl, origin, isESM) {\n  if (origin === self.location.origin) {\n    // If the worker bundle's url is on the same origin as the document,\n    // use the worker bundle's own url.\n    return workerUrl;\n  } else {\n    // Otherwise, create a blob URL which loads the worker bundle with `importScripts`.\n    var source = isESM ? 'import ' + JSON.stringify(workerUrl) + ';' : 'importScripts(' + JSON.stringify(workerUrl) + ');';\n    return URL.createObjectURL(new Blob([source], {\n      type: 'application/javascript'\n    }));\n  }\n};","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"kjr0c\\\",\\\"index.ada3d4bb.js\\\",\\\"cTHdP\\\",\\\"twrmodworker.2c672dbb.js\\\"]\"));"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$ae99f86db55f9acd$export$6503ec6e8aabbaf","$ae99f86db55f9acd$var$mapping","Map","baseUrl","manifest","i","length","path","twrWasmModule","twrWasmModuleAsync","$251237c7cf144eb4$export$3298af74d75b595c","$9FI45","$aGUWE","$lsUl2","twrWasmModuleInJSMain","malloc","constructor","opts","canvas","size","d2dcanvas","isValid","iocanvas","modParams","imports","twrDebugLog","twrDebugLogImpl","twrTime","twrTimeImpl","twrDivCharOut","iodiv","charOut","bind","twrCanvasGetProp","getProp","twrCanvasDrawSeq","drawSeq","twrCanvasCharIn","null","twrCanvasInkey","twrDivCharIn","twrSleep","twrSin","Math","sin","twrCos","cos","twrTan","tan","twrFAbs","abs","twrACos","acos","twrASin","asin","twrATan","atan","twrExp","exp","twrFloor","floor","twrCeil","ceil","twrFMod","x","y","twrLog","log","twrPow","pow","twrSqrt","sqrt","twrTrunc","trunc","twrDtoa","floatUtil","dtoa","twrToFixed","toFixed","twrToExponential","toExponential","twrAtod","atod","twrFcvtS","fcvtS","inval","$70aa1fbe63deeaae$export$16b4216ec014493d","$70aa1fbe63deeaae$var$logline","char","console","String","fromCharCode","$7c89ffbd74fdad5b$export$2366c14363f3adb5","$fDEU7","$5hO33","$5LsZ0","twrWasmModuleBase","isWasmModule","document","eiodiv","getElementById","eiocanvas","ed2dcanvas","stdio","isd2dcanvas","windim","styleIsDefault","backcolor","forecolor","fontsize","undefined","twrDiv","twrCanvas","divLog","params","stringOut","toString","$b62a3a4493ce3043$export$dd376bb3f10f6896","$ghrAp","div","divKeys","CURSOR","cursorOn","lastChar","extraBR","owner","element","modbase","twrSharedCircularBuffer","style","backgroundColor","color","font","getProxyParams","sharedArray","ch","innerHTML","slice","p","getBoundingClientRect","window","scrollTo","height","focus","str","charCodeAt","$bda3a1eb26e567b5$export$a01cca24f011573a","buf","sa","crossOriginIsolated","location","protocol","SharedArrayBuffer","Int32Array","write","Atomics","notify","read","isEmpty","readWait","rdptr","wait","$3d955ccf8fb141b7$export$c83a0a3bffe07399","$2Xdsi","memory","mem8","mem32","memD","isWorker","Uint8Array","Uint32Array","Float64Array","twrFloatUtil","loadWasm","pathToLoad","response","fetch","ok","statusText","wasmBytes","arrayBuffer","allimports","instance","WebAssembly","instantiate","env","buffer","ArrayBuffer","postMessage","Promise","resolve","m","twr_malloc","stack","twrInit","twr_wasm_init","executeC","cparams","preCallC","retval","executeCImpl","postCallC","fname","f","Array","ci","putString","URL","r","fetchAndPutURL","putArrayBuffer","u8","j","copyString","buffer_size","strIndex","putU8","u8a","dest","ab","fnin","src","getLong","idx","idx32","setLong","value","getDouble","idx64","setDouble","getShort","getString","len","sout","getU8Arr","rv","dataptr","getU32Arr","$226b87658a7c840f$export$918ffb7e046a537b","mod","strptr","upper","trimStart","toUpperCase","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","parseFloat","replaceAll","max_precision","toPrecision","decdigits","sizeInBytes","fracpart_numdigits","dec","sign","digits","decpos","isNaN","isFinite","intPart","fracPart","roundValStr","split","replace","$4327d2f23f608609$export$2f298dd69cef3c34","D2DType","$4327d2f23f608609$var$D2DType","$47Wdp","ctx","props","charWidth","charHeight","foreColor","backColor","widthInChars","heightInChars","canvasHeight","canvasWidth","cmdCompleteSignal","canvasKeys","precomputedObjects","twrSignal","getContext","c","textBaseline","sampleText","tm","measureText","width","fM","fontBoundingBoxAscent","fontBoundingBoxDescent","c2","fillStyle","pn","propName","ds","next","ins","lastins","type","D2D_FILLRECT","w","h","fillRect","D2D_STROKERECT","strokeRect","D2D_FILLCHAR","txt","fillText","D2D_FILLTEXT","D2D_MEASURETEXT","tmidx","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","D2D_SETFONT","D2D_SETFILLSTYLE","cssColor","D2D_SETSTROKESTYLE","strokeStyle","D2D_SETLINEWIDTH","lineWidth","D2D_MOVETO","moveTo","D2D_LINETO","lineTo","D2D_BEZIERTO","cp1x","cp1y","cp2x","cp2y","bezierCurveTo","D2D_BEGINPATH","beginPath","D2D_FILL","fill","D2D_SAVE","save","D2D_RESTORE","restore","D2D_STROKE","stroke","D2D_ARC","radius","startAngle","endAngle","counterClockwise","arc","D2D_IMAGEDATA","start","z","Uint8ClampedArray","ImageData","D2D_CREATERADIALGRADIENT","x0","y0","radius0","x1","y1","radius1","gradient","createRadialGradient","D2D_SETCOLORSTOP","pos","addColorStop","D2D_SETFILLSTYLEGRADIENT","D2D_RELEASEID","D2D_PUTIMAGEDATA","imgData","dx","dy","dirtyX","dirtyY","dirtyWidth","dirtyHeight","from","putImageData","signal","$3014f93b5ceae902$var$twrSignalState","twrSignalState","$3014f93b5ceae902$export$e37a7b7b851b97f3","WAITING","SIGNALED","isSignaled","reset","$fa07ea1a08a5d6be$export$78724cdcf7ebea1d","Date","now","$8227a48f951b1cca$export$678fe6e36ab9a6ff","$2vKdq","$bqeaG","myWorker","loadWasmResolve","loadWasmReject","executeCResolve","executeCReject","initLW","waitingcalls","Worker","onmessage","processMsg","reject","twrWaitingCalls","modWorkerParams","divProxyParams","canvasProxyParams","waitingCallsProxyParams","startMsg","urlToLoad","href","keyDownDiv","ev","default","keyDownCanvas","event","msgType","data","d","processMessage","$1d42537681d02be3$export$9e37856d1928d388","callCompleteSignal","parameters","startSleep","ms","setTimeout","time","$850d1d8f0aa1ea8f$export$2e2bcd8739ae039","$850d1d8f0aa1ea8f$var$keycodeCtrlKeys","$850d1d8f0aa1ea8f$var$keycodeShiftedKeys","$850d1d8f0aa1ea8f$var$keyCodeUnshiftedKeys","$850d1d8f0aa1ea8f$var$keydownKeycodeDictionary","$850d1d8f0aa1ea8f$var$keypressCharacterMapOverides","$850d1d8f0aa1ea8f$var$keypressCharacterMap","JSON","parse","stringify","key","keys","$850d1d8f0aa1ea8f$var$keydownCharacterMap","$850d1d8f0aa1ea8f$var$validEvents","$850d1d8f0aa1ea8f$var$isMobile","ua","navigator","userAgent","mobile","test","$850d1d8f0aa1ea8f$var$getKeypressKeycodeValue","charcode","character","keyCode","indexOf","which","charCode","shiftKey","ctrlKey","$hoqmg","$7e9081fcee88b005$var$url","url","origin","workerUrl","isESM","self","source","createObjectURL","Blob"],"version":3,"file":"index.ada3d4bb.js.map"}